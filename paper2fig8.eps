%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: figure8.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: Rongzhen
%%CreationDate: 06/11/2014, 17:13:04
%%BoundingBox: 0 0 586 230
%%HiResBoundingBox: 0 0 586 230
%%CropBox: 0 0 586 230
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1037 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="Artifex Ghostscript 8.54"
   xmp:ModifyDate="2011-09-07T13:09:08Z"
   xmp:CreateDate="2011-09-07T13:09:08Z"
   xmp:CreatorTool="MATLAB, The Mathworks, Inc. Version 7.6.0.324 (R2008a). Operating System: Microsoft Windows XP."
   xmpMM:DocumentID="4e3bb311-db9d-11e0-0000-254aa38c181d"
   xmpMM:InstanceID="4e3bb311-db9d-11e0-0000-254aa38c181d"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">C:\DOCUME~1\RONGZH~1\LOCALS~1\Temp\tp5aa1ecab_fecb_4b9e_9c48_1d5bc435ce7b.ps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -230 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 230 li
586 230 li
586 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.5 193.917 mo
47.5 9.91693 li
195.917 9.91693 li
195.917 193.917 li
47.5 193.917 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
@
47.5 9.91693 mo
195.917 9.91693 li
1 /0 /CSD get_res sepcs
1 sep
@
47.5 193.917 mo
195.917 193.917 li
@
195.917 193.917 mo
195.917 9.91693 li
@
47.5 193.917 mo
47.5 9.91693 li
@
47.5 193.917 mo
195.917 193.917 li
@
47.5 193.917 mo
47.5 9.91693 li
@
47.5 193.917 mo
47.5 188.75 li
@
47.5 9.91693 mo
47.5 14.9999 li
@
%%IncludeResource: font Helvetica
/WLYIZO+Helvetica /Helvetica findfont ct_VMDictPut
/WLYIZO+Helvetica*1 
[48{/.notdef}rp /zero 207{/.notdef}rp]
WLYIZO+Helvetica nf
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
44.75 206 mo
(0)sh
96.9168 193.917 mo
96.9168 188.75 li
@
96.9168 9.91693 mo
96.9168 14.9999 li
@
%%IncludeResource: font Helvetica
/WLYIZO+Helvetica*1 
[48{/.notdef}rp /zero /.notdef /two 205{/.notdef}rp]
WLYIZO+Helvetica nf
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
88.5832 206 mo
(200)
[5.56 5.56 0 ]xsh
146.417 193.917 mo
146.417 188.75 li
@
146.417 9.91693 mo
146.417 14.9999 li
@
%%IncludeResource: font Helvetica
/WLYIZO+Helvetica*1 
[48{/.notdef}rp /zero /.notdef /two /.notdef /four 203{/.notdef}rp]
WLYIZO+Helvetica nf
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
138.083 206 mo
(400)
[5.56 5.56 0 ]xsh
195.917 193.917 mo
195.917 188.75 li
@
195.917 9.91693 mo
195.917 14.9999 li
@
%%IncludeResource: font Helvetica
/WLYIZO+Helvetica*1 
[48{/.notdef}rp /zero /.notdef /two /.notdef /four /.notdef /six 
201{/.notdef}rp]
WLYIZO+Helvetica nf
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
187.583 206 mo
(600)
[5.56 5.56 0 ]xsh
47.5 193.917 mo
52.5832 193.917 li
@
195.917 193.917 mo
190.75 193.917 li
@
%%IncludeResource: font Helvetica
/WLYIZO+Helvetica*1 
[45{/.notdef}rp /hyphen /period /.notdef /zero /.notdef /two /.notdef 
/four /.notdef /six 201{/.notdef}rp]
WLYIZO+Helvetica nf
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
27.4168 197.583 mo
(-0.6)
[3.32993 5.56 2.78 0 ]xsh
47.5 132.583 mo
52.5832 132.583 li
@
195.917 132.583 mo
190.75 132.583 li
@
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
27.4168 136.25 mo
(-0.4)
[3.32993 5.56 2.78 0 ]xsh
47.5 71.2499 mo
52.5832 71.2499 li
@
195.917 71.2499 mo
190.75 71.2499 li
@
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
27.4168 74.9169 mo
(-0.2)
[3.32993 5.56 2.78 0 ]xsh
47.5 9.91693 mo
52.5832 9.91693 li
@
195.917 9.91693 mo
190.75 9.91693 li
@
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
39.0832 13.5829 mo
(0)sh
47.5 9.91693 mo
195.917 9.91693 li
@
47.5 193.917 mo
195.917 193.917 li
@
195.917 193.917 mo
195.917 9.91693 li
@
47.5 193.917 mo
47.5 9.91693 li
@
gsave
47.5 9.91699 mo
47.5 194 li
196 194 li
196 9.91699 li
cp
clp
52.4168 161.25 mo
57.3332 158.333 li
62.3332 153.333 li
67.25 147.583 li
72.1668 140.917 li
77.1668 133.917 li
82.0832 126.75 li
87 119.417 li
92 112 li
96.9168 104.417 li
101.917 96.6669 li
106.833 88.8329 li
111.75 80.9999 li
116.75 72.9999 li
121.667 64.9999 li
126.583 56.8329 li
131.583 48.6669 li
136.5 40.4999 li
141.417 32.2499 li
146.417 24.4999 li
151.333 18.3329 li
156.333 14.4999 li
161.25 12.4999 li
166.167 11.4999 li
171.167 10.9999 li
176.083 10.6669 li
181 10.4999 li
186 10.4169 li
190.917 10.3329 li
195.917 10.3329 li
/1 
[/DeviceCMYK] /CSA add_res
.895628 .7673 3.0518e-5 3.0518e-5 cmyk
@
52.4168 161.917 mo
57.3332 159.667 li
62.3332 156.333 li
67.25 151.917 li
72.1668 146.833 li
77.1668 141.167 li
82.0832 135.25 li
87 129.167 li
92 122.917 li
96.9168 116.583 li
101.917 110.083 li
106.833 103.5 li
111.75 96.8329 li
116.75 90.0829 li
121.667 83.2499 li
126.583 76.3329 li
131.583 69.4169 li
136.5 62.3329 li
141.417 55.2499 li
146.417 48.0829 li
151.333 40.9169 li
156.333 33.8329 li
161.25 27.1669 li
166.167 21.4169 li
171.167 17.3329 li
176.083 14.7499 li
181 13.1669 li
186 12.2499 li
190.917 11.6669 li
195.917 11.2499 li
.627314 3.0518e-5 1 3.0518e-5 cmyk
@
52.4168 162.5 mo
57.3332 161 li
62.3332 158.833 li
67.25 155.75 li
72.1668 152.25 li
77.1668 148.167 li
82.0832 143.667 li
87 138.833 li
92 133.833 li
96.9168 128.667 li
101.917 123.417 li
106.833 118.083 li
111.75 112.583 li
116.75 107.083 li
121.667 101.5 li
126.583 95.8329 li
131.583 90.0829 li
136.5 84.2499 li
141.417 78.4169 li
146.417 72.4169 li
151.333 66.4169 li
156.333 60.4169 li
161.25 54.3329 li
166.167 48.1669 li
171.167 42.0829 li
176.083 36.0829 li
181 30.4169 li
186 25.4169 li
190.917 21.3329 li
195.917 18.3329 li
3.0518e-5 .990631 1 .000396735 cmyk
@
52.4168 163.083 mo
57.3332 162.167 li
62.3332 160.917 li
67.25 159.083 li
72.1668 156.833 li
77.1668 154.25 li
82.0832 151.333 li
87 148 li
92 144.417 li
96.9168 140.583 li
101.917 136.667 li
106.833 132.583 li
111.75 128.333 li
116.75 124.083 li
121.667 119.667 li
126.583 115.25 li
131.583 110.75 li
136.5 106.167 li
141.417 101.5 li
146.417 96.7499 li
151.333 91.9999 li
156.333 87.1669 li
161.25 82.2499 li
166.167 77.3329 li
171.167 72.4169 li
176.083 67.3329 li
181 62.3329 li
186 57.2499 li
190.917 52.0829 li
195.917 46.9999 li
.520012 3.0518e-5 .126131 3.0518e-5 cmyk
@
52.4168 163.75 mo
57.3332 163.417 li
62.3332 162.75 li
67.25 161.917 li
72.1668 160.667 li
77.1668 159.25 li
82.0832 157.583 li
87 155.75 li
92 153.667 li
96.9168 151.417 li
101.917 148.917 li
106.833 146.25 li
111.75 143.417 li
116.75 140.5 li
121.667 137.5 li
126.583 134.333 li
131.583 131.083 li
136.5 127.75 li
141.417 124.333 li
146.417 120.917 li
151.333 117.333 li
156.333 113.75 li
161.25 110.083 li
166.167 106.417 li
171.167 102.667 li
176.083 98.9169 li
181 95.0829 li
186 91.1669 li
190.917 87.2499 li
195.917 83.2499 li
.265019 .809232 3.0518e-5 3.0518e-5 cmyk
@
52.4168 164.333 mo
57.3332 164.667 li
62.3332 164.667 li
67.25 164.417 li
72.1668 164.083 li
77.1668 163.5 li
82.0832 162.833 li
87 162.083 li
92 161.083 li
96.9168 160.083 li
101.917 158.917 li
106.833 157.667 li
111.75 156.25 li
116.75 154.75 li
121.667 153.083 li
126.583 151.417 li
131.583 149.583 li
136.5 147.667 li
141.417 145.667 li
146.417 143.583 li
151.333 141.417 li
156.333 139.167 li
161.25 136.833 li
166.167 134.417 li
171.167 132 li
176.083 129.5 li
181 127 li
186 124.333 li
190.917 121.667 li
195.917 119 li
.0639048 3.0518e-5 .996094 3.0518e-5 cmyk
@
52.4168 164.917 mo
57.3332 165.833 li
62.3332 166.5 li
67.25 166.917 li
72.1668 167.167 li
77.1668 167.417 li
82.0832 167.5 li
87 167.5 li
92 167.417 li
96.9168 167.25 li
101.917 167 li
106.833 166.75 li
111.75 166.417 li
116.75 165.917 li
121.667 165.5 li
126.583 164.917 li
131.583 164.333 li
136.5 163.583 li
141.417 162.833 li
146.417 162.083 li
151.333 161.167 li
156.333 160.25 li
161.25 159.333 li
166.167 158.25 li
171.167 157.167 li
176.083 156 li
181 154.833 li
186 153.583 li
190.917 152.25 li
195.917 151 li
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
0 779 mo
0 -57 li
593.7 -57 li
593.7 779 li
cp
clp
53.4168 161.25 mo
53.4168 161.802 52.9688 162.25 52.4168 162.25 cv
51.8648 162.25 51.4168 161.802 51.4168 161.25 cv
51.4168 160.698 51.8648 160.25 52.4168 160.25 cv
52.9688 160.25 53.4168 160.698 53.4168 161.25 cv
.895628 .7673 3.0518e-5 3.0518e-5 cmyk
f
58.3332 158.417 mo
58.3332 158.969 57.8852 159.417 57.3332 159.417 cv
56.7813 159.417 56.3332 158.969 56.3332 158.417 cv
56.3332 157.865 56.7813 157.417 57.3332 157.417 cv
57.8852 157.417 58.3332 157.865 58.3332 158.417 cv
f
63.3332 154 mo
63.3332 154.552 62.8852 155 62.3332 155 cv
61.7813 155 61.3332 154.552 61.3332 154 cv
61.3332 153.448 61.7813 153 62.3332 153 cv
62.8852 153 63.3332 153.448 63.3332 154 cv
f
68.25 148.75 mo
68.25 149.302 67.802 149.75 67.25 149.75 cv
66.698 149.75 66.25 149.302 66.25 148.75 cv
66.25 148.198 66.698 147.75 67.25 147.75 cv
67.802 147.75 68.25 148.198 68.25 148.75 cv
f
73.1668 142.667 mo
73.1668 143.219 72.7188 143.667 72.1668 143.667 cv
71.6148 143.667 71.1668 143.219 71.1668 142.667 cv
71.1668 142.115 71.6148 141.667 72.1668 141.667 cv
72.7188 141.667 73.1668 142.115 73.1668 142.667 cv
f
78.1668 136.167 mo
78.1668 136.719 77.7188 137.167 77.1668 137.167 cv
76.6148 137.167 76.1668 136.719 76.1668 136.167 cv
76.1668 135.615 76.6148 135.167 77.1668 135.167 cv
77.7188 135.167 78.1668 135.615 78.1668 136.167 cv
f
83.0832 129.5 mo
83.0832 130.052 82.6352 130.5 82.0832 130.5 cv
81.5313 130.5 81.0832 130.052 81.0832 129.5 cv
81.0832 128.948 81.5313 128.5 82.0832 128.5 cv
82.6352 128.5 83.0832 128.948 83.0832 129.5 cv
f
88 122.667 mo
88 123.219 87.552 123.667 87 123.667 cv
86.448 123.667 86 123.219 86 122.667 cv
86 122.115 86.448 121.667 87 121.667 cv
87.552 121.667 88 122.115 88 122.667 cv
f
93 115.667 mo
93 116.219 92.552 116.667 92 116.667 cv
91.448 116.667 91 116.219 91 115.667 cv
91 115.115 91.448 114.667 92 114.667 cv
92.552 114.667 93 115.115 93 115.667 cv
f
97.9168 108.583 mo
97.9168 109.135 97.4688 109.583 96.9168 109.583 cv
96.3648 109.583 95.9168 109.135 95.9168 108.583 cv
95.9168 108.031 96.3648 107.583 96.9168 107.583 cv
97.4688 107.583 97.9168 108.031 97.9168 108.583 cv
f
102.917 101.417 mo
102.917 101.969 102.469 102.417 101.917 102.417 cv
101.365 102.417 100.917 101.969 100.917 101.417 cv
100.917 100.865 101.365 100.417 101.917 100.417 cv
102.469 100.417 102.917 100.865 102.917 101.417 cv
f
107.833 94.1669 mo
107.833 94.7189 107.385 95.1669 106.833 95.1669 cv
106.281 95.1669 105.833 94.7189 105.833 94.1669 cv
105.833 93.6149 106.281 93.1669 106.833 93.1669 cv
107.385 93.1669 107.833 93.6149 107.833 94.1669 cv
f
112.75 86.8329 mo
112.75 87.3849 112.302 87.8329 111.75 87.8329 cv
111.198 87.8329 110.75 87.3849 110.75 86.8329 cv
110.75 86.2809 111.198 85.8329 111.75 85.8329 cv
112.302 85.8329 112.75 86.2809 112.75 86.8329 cv
f
117.75 79.4999 mo
117.75 80.0519 117.302 80.4999 116.75 80.4999 cv
116.198 80.4999 115.75 80.0519 115.75 79.4999 cv
115.75 78.9479 116.198 78.4999 116.75 78.4999 cv
117.302 78.4999 117.75 78.9479 117.75 79.4999 cv
f
122.667 71.9999 mo
122.667 72.5519 122.219 72.9999 121.667 72.9999 cv
121.115 72.9999 120.667 72.5519 120.667 71.9999 cv
120.667 71.4479 121.115 70.9999 121.667 70.9999 cv
122.219 70.9999 122.667 71.4479 122.667 71.9999 cv
f
127.583 64.4999 mo
127.583 65.0519 127.135 65.4999 126.583 65.4999 cv
126.031 65.4999 125.583 65.0519 125.583 64.4999 cv
125.583 63.9479 126.031 63.4999 126.583 63.4999 cv
127.135 63.4999 127.583 63.9479 127.583 64.4999 cv
f
132.583 56.9999 mo
132.583 57.5519 132.135 57.9999 131.583 57.9999 cv
131.031 57.9999 130.583 57.5519 130.583 56.9999 cv
130.583 56.4479 131.031 55.9999 131.583 55.9999 cv
132.135 55.9999 132.583 56.4479 132.583 56.9999 cv
f
137.5 49.3329 mo
137.5 49.8849 137.052 50.3329 136.5 50.3329 cv
135.948 50.3329 135.5 49.8849 135.5 49.3329 cv
135.5 48.7809 135.948 48.3329 136.5 48.3329 cv
137.052 48.3329 137.5 48.7809 137.5 49.3329 cv
f
142.417 41.7499 mo
142.417 42.3019 141.969 42.7499 141.417 42.7499 cv
140.865 42.7499 140.417 42.3019 140.417 41.7499 cv
140.417 41.1979 140.865 40.7499 141.417 40.7499 cv
141.969 40.7499 142.417 41.1979 142.417 41.7499 cv
f
147.417 34.0829 mo
147.417 34.6349 146.969 35.0829 146.417 35.0829 cv
145.865 35.0829 145.417 34.6349 145.417 34.0829 cv
145.417 33.5309 145.865 33.0829 146.417 33.0829 cv
146.969 33.0829 147.417 33.5309 147.417 34.0829 cv
f
152.333 26.8329 mo
152.333 27.3849 151.885 27.8329 151.333 27.8329 cv
150.781 27.8329 150.333 27.3849 150.333 26.8329 cv
150.333 26.2809 150.781 25.8329 151.333 25.8329 cv
151.885 25.8329 152.333 26.2809 152.333 26.8329 cv
f
157.333 20.5829 mo
157.333 21.1349 156.885 21.5829 156.333 21.5829 cv
155.781 21.5829 155.333 21.1349 155.333 20.5829 cv
155.333 20.0309 155.781 19.5829 156.333 19.5829 cv
156.885 19.5829 157.333 20.0309 157.333 20.5829 cv
f
162.25 16.2499 mo
162.25 16.8019 161.802 17.2499 161.25 17.2499 cv
160.698 17.2499 160.25 16.8019 160.25 16.2499 cv
160.25 15.6979 160.698 15.2499 161.25 15.2499 cv
161.802 15.2499 162.25 15.6979 162.25 16.2499 cv
f
167.167 13.7499 mo
167.167 14.3019 166.719 14.7499 166.167 14.7499 cv
165.615 14.7499 165.167 14.3019 165.167 13.7499 cv
165.167 13.1979 165.615 12.7499 166.167 12.7499 cv
166.719 12.7499 167.167 13.1979 167.167 13.7499 cv
f
172.167 12.3329 mo
172.167 12.8849 171.719 13.3329 171.167 13.3329 cv
170.615 13.3329 170.167 12.8849 170.167 12.3329 cv
170.167 11.7809 170.615 11.3329 171.167 11.3329 cv
171.719 11.3329 172.167 11.7809 172.167 12.3329 cv
f
177.083 11.4999 mo
177.083 12.0519 176.635 12.4999 176.083 12.4999 cv
175.531 12.4999 175.083 12.0519 175.083 11.4999 cv
175.083 10.9479 175.531 10.4999 176.083 10.4999 cv
176.635 10.4999 177.083 10.9479 177.083 11.4999 cv
f
182 10.9999 mo
182 11.5519 181.552 11.9999 181 11.9999 cv
180.448 11.9999 180 11.5519 180 10.9999 cv
180 10.4479 180.448 9.99994 181 9.99994 cv
181.552 9.99994 182 10.4479 182 10.9999 cv
f
187 10.7499 mo
187 11.3019 186.552 11.7499 186 11.7499 cv
185.448 11.7499 185 11.3019 185 10.7499 cv
185 10.1979 185.448 9.74994 186 9.74994 cv
186.552 9.74994 187 10.1979 187 10.7499 cv
f
191.917 10.5829 mo
191.917 11.1349 191.469 11.5829 190.917 11.5829 cv
190.365 11.5829 189.917 11.1349 189.917 10.5829 cv
189.917 10.0309 190.365 9.58295 190.917 9.58295 cv
191.469 9.58295 191.917 10.0309 191.917 10.5829 cv
f
196.917 10.4999 mo
196.917 11.0519 196.469 11.4999 195.917 11.4999 cv
195.365 11.4999 194.917 11.0519 194.917 10.4999 cv
194.917 9.94794 195.365 9.49994 195.917 9.49994 cv
196.469 9.49994 196.917 9.94794 196.917 10.4999 cv
f
53.4168 161.917 mo
53.4168 162.469 52.9688 162.917 52.4168 162.917 cv
51.8648 162.917 51.4168 162.469 51.4168 161.917 cv
51.4168 161.365 51.8648 160.917 52.4168 160.917 cv
52.9688 160.917 53.4168 161.365 53.4168 161.917 cv
.627314 3.0518e-5 1 3.0518e-5 cmyk
f
58.3332 159.75 mo
58.3332 160.302 57.8852 160.75 57.3332 160.75 cv
56.7813 160.75 56.3332 160.302 56.3332 159.75 cv
56.3332 159.198 56.7813 158.75 57.3332 158.75 cv
57.8852 158.75 58.3332 159.198 58.3332 159.75 cv
f
63.3332 156.75 mo
63.3332 157.302 62.8852 157.75 62.3332 157.75 cv
61.7813 157.75 61.3332 157.302 61.3332 156.75 cv
61.3332 156.198 61.7813 155.75 62.3332 155.75 cv
62.8852 155.75 63.3332 156.198 63.3332 156.75 cv
f
68.25 152.833 mo
68.25 153.385 67.802 153.833 67.25 153.833 cv
66.698 153.833 66.25 153.385 66.25 152.833 cv
66.25 152.281 66.698 151.833 67.25 151.833 cv
67.802 151.833 68.25 152.281 68.25 152.833 cv
f
73.1668 148.333 mo
73.1668 148.885 72.7188 149.333 72.1668 149.333 cv
71.6148 149.333 71.1668 148.885 71.1668 148.333 cv
71.1668 147.781 71.6148 147.333 72.1668 147.333 cv
72.7188 147.333 73.1668 147.781 73.1668 148.333 cv
f
78.1668 143.333 mo
78.1668 143.885 77.7188 144.333 77.1668 144.333 cv
76.6148 144.333 76.1668 143.885 76.1668 143.333 cv
76.1668 142.781 76.6148 142.333 77.1668 142.333 cv
77.7188 142.333 78.1668 142.781 78.1668 143.333 cv
f
83.0832 137.917 mo
83.0832 138.469 82.6352 138.917 82.0832 138.917 cv
81.5313 138.917 81.0832 138.469 81.0832 137.917 cv
81.0832 137.365 81.5313 136.917 82.0832 136.917 cv
82.6352 136.917 83.0832 137.365 83.0832 137.917 cv
f
88 132.333 mo
88 132.885 87.552 133.333 87 133.333 cv
86.448 133.333 86 132.885 86 132.333 cv
86 131.781 86.448 131.333 87 131.333 cv
87.552 131.333 88 131.781 88 132.333 cv
f
93 126.583 mo
93 127.135 92.552 127.583 92 127.583 cv
91.448 127.583 91 127.135 91 126.583 cv
91 126.031 91.448 125.583 92 125.583 cv
92.552 125.583 93 126.031 93 126.583 cv
f
97.9168 120.75 mo
97.9168 121.302 97.4688 121.75 96.9168 121.75 cv
96.3648 121.75 95.9168 121.302 95.9168 120.75 cv
95.9168 120.198 96.3648 119.75 96.9168 119.75 cv
97.4688 119.75 97.9168 120.198 97.9168 120.75 cv
f
102.917 114.833 mo
102.917 115.385 102.469 115.833 101.917 115.833 cv
101.365 115.833 100.917 115.385 100.917 114.833 cv
100.917 114.281 101.365 113.833 101.917 113.833 cv
102.469 113.833 102.917 114.281 102.917 114.833 cv
f
107.833 108.75 mo
107.833 109.302 107.385 109.75 106.833 109.75 cv
106.281 109.75 105.833 109.302 105.833 108.75 cv
105.833 108.198 106.281 107.75 106.833 107.75 cv
107.385 107.75 107.833 108.198 107.833 108.75 cv
f
112.75 102.667 mo
112.75 103.219 112.302 103.667 111.75 103.667 cv
111.198 103.667 110.75 103.219 110.75 102.667 cv
110.75 102.115 111.198 101.667 111.75 101.667 cv
112.302 101.667 112.75 102.115 112.75 102.667 cv
f
117.75 96.4999 mo
117.75 97.0519 117.302 97.4999 116.75 97.4999 cv
116.198 97.4999 115.75 97.0519 115.75 96.4999 cv
115.75 95.9479 116.198 95.4999 116.75 95.4999 cv
117.302 95.4999 117.75 95.9479 117.75 96.4999 cv
f
122.667 90.2499 mo
122.667 90.8019 122.219 91.2499 121.667 91.2499 cv
121.115 91.2499 120.667 90.8019 120.667 90.2499 cv
120.667 89.6979 121.115 89.2499 121.667 89.2499 cv
122.219 89.2499 122.667 89.6979 122.667 90.2499 cv
f
127.583 83.9999 mo
127.583 84.5519 127.135 84.9999 126.583 84.9999 cv
126.031 84.9999 125.583 84.5519 125.583 83.9999 cv
125.583 83.4479 126.031 82.9999 126.583 82.9999 cv
127.135 82.9999 127.583 83.4479 127.583 83.9999 cv
f
132.583 77.6669 mo
132.583 78.2189 132.135 78.6669 131.583 78.6669 cv
131.031 78.6669 130.583 78.2189 130.583 77.6669 cv
130.583 77.1149 131.031 76.6669 131.583 76.6669 cv
132.135 76.6669 132.583 77.1149 132.583 77.6669 cv
f
137.5 71.2499 mo
137.5 71.8019 137.052 72.2499 136.5 72.2499 cv
135.948 72.2499 135.5 71.8019 135.5 71.2499 cv
135.5 70.6979 135.948 70.2499 136.5 70.2499 cv
137.052 70.2499 137.5 70.6979 137.5 71.2499 cv
f
142.417 64.8329 mo
142.417 65.3849 141.969 65.8329 141.417 65.8329 cv
140.865 65.8329 140.417 65.3849 140.417 64.8329 cv
140.417 64.2809 140.865 63.8329 141.417 63.8329 cv
141.969 63.8329 142.417 64.2809 142.417 64.8329 cv
f
147.417 58.3329 mo
147.417 58.8849 146.969 59.3329 146.417 59.3329 cv
145.865 59.3329 145.417 58.8849 145.417 58.3329 cv
145.417 57.7809 145.865 57.3329 146.417 57.3329 cv
146.969 57.3329 147.417 57.7809 147.417 58.3329 cv
f
152.333 51.8329 mo
152.333 52.3849 151.885 52.8329 151.333 52.8329 cv
150.781 52.8329 150.333 52.3849 150.333 51.8329 cv
150.333 51.2809 150.781 50.8329 151.333 50.8329 cv
151.885 50.8329 152.333 51.2809 152.333 51.8329 cv
f
157.333 45.2499 mo
157.333 45.8019 156.885 46.2499 156.333 46.2499 cv
155.781 46.2499 155.333 45.8019 155.333 45.2499 cv
155.333 44.6979 155.781 44.2499 156.333 44.2499 cv
156.885 44.2499 157.333 44.6979 157.333 45.2499 cv
f
162.25 38.7499 mo
162.25 39.3019 161.802 39.7499 161.25 39.7499 cv
160.698 39.7499 160.25 39.3019 160.25 38.7499 cv
160.25 38.1979 160.698 37.7499 161.25 37.7499 cv
161.802 37.7499 162.25 38.1979 162.25 38.7499 cv
f
167.167 32.4169 mo
167.167 32.9689 166.719 33.4169 166.167 33.4169 cv
165.615 33.4169 165.167 32.9689 165.167 32.4169 cv
165.167 31.8649 165.615 31.4169 166.167 31.4169 cv
166.719 31.4169 167.167 31.8649 167.167 32.4169 cv
f
172.167 26.4999 mo
172.167 27.0519 171.719 27.4999 171.167 27.4999 cv
170.615 27.4999 170.167 27.0519 170.167 26.4999 cv
170.167 25.9479 170.615 25.4999 171.167 25.4999 cv
171.719 25.4999 172.167 25.9479 172.167 26.4999 cv
f
177.083 21.6669 mo
177.083 22.2189 176.635 22.6669 176.083 22.6669 cv
175.531 22.6669 175.083 22.2189 175.083 21.6669 cv
175.083 21.1149 175.531 20.6669 176.083 20.6669 cv
176.635 20.6669 177.083 21.1149 177.083 21.6669 cv
f
182 17.9999 mo
182 18.5519 181.552 18.9999 181 18.9999 cv
180.448 18.9999 180 18.5519 180 17.9999 cv
180 17.4479 180.448 16.9999 181 16.9999 cv
181.552 16.9999 182 17.4479 182 17.9999 cv
f
187 15.4999 mo
187 16.0519 186.552 16.4999 186 16.4999 cv
185.448 16.4999 185 16.0519 185 15.4999 cv
185 14.9479 185.448 14.4999 186 14.4999 cv
186.552 14.4999 187 14.9479 187 15.4999 cv
f
191.917 13.9169 mo
191.917 14.4689 191.469 14.9169 190.917 14.9169 cv
190.365 14.9169 189.917 14.4689 189.917 13.9169 cv
189.917 13.3649 190.365 12.9169 190.917 12.9169 cv
191.469 12.9169 191.917 13.3649 191.917 13.9169 cv
f
196.917 12.8329 mo
196.917 13.3849 196.469 13.8329 195.917 13.8329 cv
195.365 13.8329 194.917 13.3849 194.917 12.8329 cv
194.917 12.2809 195.365 11.8329 195.917 11.8329 cv
196.469 11.8329 196.917 12.2809 196.917 12.8329 cv
f
53.4168 162.5 mo
53.4168 163.052 52.9688 163.5 52.4168 163.5 cv
51.8648 163.5 51.4168 163.052 51.4168 162.5 cv
51.4168 161.948 51.8648 161.5 52.4168 161.5 cv
52.9688 161.5 53.4168 161.948 53.4168 162.5 cv
3.0518e-5 .990631 1 .000396735 cmyk
f
58.3332 161 mo
58.3332 161.552 57.8852 162 57.3332 162 cv
56.7813 162 56.3332 161.552 56.3332 161 cv
56.3332 160.448 56.7813 160 57.3332 160 cv
57.8852 160 58.3332 160.448 58.3332 161 cv
f
63.3332 159 mo
63.3332 159.552 62.8852 160 62.3332 160 cv
61.7813 160 61.3332 159.552 61.3332 159 cv
61.3332 158.448 61.7813 158 62.3332 158 cv
62.8852 158 63.3332 158.448 63.3332 159 cv
f
68.25 156.417 mo
68.25 156.969 67.802 157.417 67.25 157.417 cv
66.698 157.417 66.25 156.969 66.25 156.417 cv
66.25 155.865 66.698 155.417 67.25 155.417 cv
67.802 155.417 68.25 155.865 68.25 156.417 cv
f
73.1668 153.25 mo
73.1668 153.802 72.7188 154.25 72.1668 154.25 cv
71.6148 154.25 71.1668 153.802 71.1668 153.25 cv
71.1668 152.698 71.6148 152.25 72.1668 152.25 cv
72.7188 152.25 73.1668 152.698 73.1668 153.25 cv
f
78.1668 149.833 mo
78.1668 150.385 77.7188 150.833 77.1668 150.833 cv
76.6148 150.833 76.1668 150.385 76.1668 149.833 cv
76.1668 149.281 76.6148 148.833 77.1668 148.833 cv
77.7188 148.833 78.1668 149.281 78.1668 149.833 cv
f
83.0832 146 mo
83.0832 146.552 82.6352 147 82.0832 147 cv
81.5313 147 81.0832 146.552 81.0832 146 cv
81.0832 145.448 81.5313 145 82.0832 145 cv
82.6352 145 83.0832 145.448 83.0832 146 cv
f
88 141.75 mo
88 142.302 87.552 142.75 87 142.75 cv
86.448 142.75 86 142.302 86 141.75 cv
86 141.198 86.448 140.75 87 140.75 cv
87.552 140.75 88 141.198 88 141.75 cv
f
93 137.333 mo
93 137.885 92.552 138.333 92 138.333 cv
91.448 138.333 91 137.885 91 137.333 cv
91 136.781 91.448 136.333 92 136.333 cv
92.552 136.333 93 136.781 93 137.333 cv
f
97.9168 132.833 mo
97.9168 133.385 97.4688 133.833 96.9168 133.833 cv
96.3648 133.833 95.9168 133.385 95.9168 132.833 cv
95.9168 132.281 96.3648 131.833 96.9168 131.833 cv
97.4688 131.833 97.9168 132.281 97.9168 132.833 cv
f
102.917 128.083 mo
102.917 128.635 102.469 129.083 101.917 129.083 cv
101.365 129.083 100.917 128.635 100.917 128.083 cv
100.917 127.531 101.365 127.083 101.917 127.083 cv
102.469 127.083 102.917 127.531 102.917 128.083 cv
f
107.833 123.333 mo
107.833 123.885 107.385 124.333 106.833 124.333 cv
106.281 124.333 105.833 123.885 105.833 123.333 cv
105.833 122.781 106.281 122.333 106.833 122.333 cv
107.385 122.333 107.833 122.781 107.833 123.333 cv
f
112.75 118.417 mo
112.75 118.969 112.302 119.417 111.75 119.417 cv
111.198 119.417 110.75 118.969 110.75 118.417 cv
110.75 117.865 111.198 117.417 111.75 117.417 cv
112.302 117.417 112.75 117.865 112.75 118.417 cv
f
117.75 113.5 mo
117.75 114.052 117.302 114.5 116.75 114.5 cv
116.198 114.5 115.75 114.052 115.75 113.5 cv
115.75 112.948 116.198 112.5 116.75 112.5 cv
117.302 112.5 117.75 112.948 117.75 113.5 cv
f
122.667 108.5 mo
122.667 109.052 122.219 109.5 121.667 109.5 cv
121.115 109.5 120.667 109.052 120.667 108.5 cv
120.667 107.948 121.115 107.5 121.667 107.5 cv
122.219 107.5 122.667 107.948 122.667 108.5 cv
f
127.583 103.417 mo
127.583 103.969 127.135 104.417 126.583 104.417 cv
126.031 104.417 125.583 103.969 125.583 103.417 cv
125.583 102.865 126.031 102.417 126.583 102.417 cv
127.135 102.417 127.583 102.865 127.583 103.417 cv
f
132.583 98.3329 mo
132.583 98.8849 132.135 99.3329 131.583 99.3329 cv
131.031 99.3329 130.583 98.8849 130.583 98.3329 cv
130.583 97.7809 131.031 97.3329 131.583 97.3329 cv
132.135 97.3329 132.583 97.7809 132.583 98.3329 cv
f
137.5 93.1669 mo
137.5 93.7189 137.052 94.1669 136.5 94.1669 cv
135.948 94.1669 135.5 93.7189 135.5 93.1669 cv
135.5 92.6149 135.948 92.1669 136.5 92.1669 cv
137.052 92.1669 137.5 92.6149 137.5 93.1669 cv
f
142.417 87.9169 mo
142.417 88.4689 141.969 88.9169 141.417 88.9169 cv
140.865 88.9169 140.417 88.4689 140.417 87.9169 cv
140.417 87.3649 140.865 86.9169 141.417 86.9169 cv
141.969 86.9169 142.417 87.3649 142.417 87.9169 cv
f
147.417 82.6669 mo
147.417 83.2189 146.969 83.6669 146.417 83.6669 cv
145.865 83.6669 145.417 83.2189 145.417 82.6669 cv
145.417 82.1149 145.865 81.6669 146.417 81.6669 cv
146.969 81.6669 147.417 82.1149 147.417 82.6669 cv
f
152.333 77.3329 mo
152.333 77.8849 151.885 78.3329 151.333 78.3329 cv
150.781 78.3329 150.333 77.8849 150.333 77.3329 cv
150.333 76.7809 150.781 76.3329 151.333 76.3329 cv
151.885 76.3329 152.333 76.7809 152.333 77.3329 cv
f
157.333 71.9999 mo
157.333 72.5519 156.885 72.9999 156.333 72.9999 cv
155.781 72.9999 155.333 72.5519 155.333 71.9999 cv
155.333 71.4479 155.781 70.9999 156.333 70.9999 cv
156.885 70.9999 157.333 71.4479 157.333 71.9999 cv
f
162.25 66.5829 mo
162.25 67.1349 161.802 67.5829 161.25 67.5829 cv
160.698 67.5829 160.25 67.1349 160.25 66.5829 cv
160.25 66.0309 160.698 65.5829 161.25 65.5829 cv
161.802 65.5829 162.25 66.0309 162.25 66.5829 cv
f
167.167 61.1669 mo
167.167 61.7189 166.719 62.1669 166.167 62.1669 cv
165.615 62.1669 165.167 61.7189 165.167 61.1669 cv
165.167 60.6149 165.615 60.1669 166.167 60.1669 cv
166.719 60.1669 167.167 60.6149 167.167 61.1669 cv
f
172.167 55.7499 mo
172.167 56.3019 171.719 56.7499 171.167 56.7499 cv
170.615 56.7499 170.167 56.3019 170.167 55.7499 cv
170.167 55.1979 170.615 54.7499 171.167 54.7499 cv
171.719 54.7499 172.167 55.1979 172.167 55.7499 cv
f
177.083 50.2499 mo
177.083 50.8019 176.635 51.2499 176.083 51.2499 cv
175.531 51.2499 175.083 50.8019 175.083 50.2499 cv
175.083 49.6979 175.531 49.2499 176.083 49.2499 cv
176.635 49.2499 177.083 49.6979 177.083 50.2499 cv
f
182 44.8329 mo
182 45.3849 181.552 45.8329 181 45.8329 cv
180.448 45.8329 180 45.3849 180 44.8329 cv
180 44.2809 180.448 43.8329 181 43.8329 cv
181.552 43.8329 182 44.2809 182 44.8329 cv
f
187 39.4999 mo
187 40.0519 186.552 40.4999 186 40.4999 cv
185.448 40.4999 185 40.0519 185 39.4999 cv
185 38.9479 185.448 38.4999 186 38.4999 cv
186.552 38.4999 187 38.9479 187 39.4999 cv
f
191.917 34.2499 mo
191.917 34.8019 191.469 35.2499 190.917 35.2499 cv
190.365 35.2499 189.917 34.8019 189.917 34.2499 cv
189.917 33.6979 190.365 33.2499 190.917 33.2499 cv
191.469 33.2499 191.917 33.6979 191.917 34.2499 cv
f
196.917 29.4999 mo
196.917 30.0519 196.469 30.4999 195.917 30.4999 cv
195.365 30.4999 194.917 30.0519 194.917 29.4999 cv
194.917 28.9479 195.365 28.4999 195.917 28.4999 cv
196.469 28.4999 196.917 28.9479 196.917 29.4999 cv
f
53.4168 163.083 mo
53.4168 163.635 52.9688 164.083 52.4168 164.083 cv
51.8648 164.083 51.4168 163.635 51.4168 163.083 cv
51.4168 162.531 51.8648 162.083 52.4168 162.083 cv
52.9688 162.083 53.4168 162.531 53.4168 163.083 cv
.520012 3.0518e-5 .126131 3.0518e-5 cmyk
f
58.3332 162.25 mo
58.3332 162.802 57.8852 163.25 57.3332 163.25 cv
56.7813 163.25 56.3332 162.802 56.3332 162.25 cv
56.3332 161.698 56.7813 161.25 57.3332 161.25 cv
57.8852 161.25 58.3332 161.698 58.3332 162.25 cv
f
63.3332 160.917 mo
63.3332 161.469 62.8852 161.917 62.3332 161.917 cv
61.7813 161.917 61.3332 161.469 61.3332 160.917 cv
61.3332 160.365 61.7813 159.917 62.3332 159.917 cv
62.8852 159.917 63.3332 160.365 63.3332 160.917 cv
f
68.25 159.333 mo
68.25 159.885 67.802 160.333 67.25 160.333 cv
66.698 160.333 66.25 159.885 66.25 159.333 cv
66.25 158.781 66.698 158.333 67.25 158.333 cv
67.802 158.333 68.25 158.781 68.25 159.333 cv
f
73.1668 157.417 mo
73.1668 157.969 72.7188 158.417 72.1668 158.417 cv
71.6148 158.417 71.1668 157.969 71.1668 157.417 cv
71.1668 156.865 71.6148 156.417 72.1668 156.417 cv
72.7188 156.417 73.1668 156.865 73.1668 157.417 cv
f
78.1668 155.25 mo
78.1668 155.802 77.7188 156.25 77.1668 156.25 cv
76.6148 156.25 76.1668 155.802 76.1668 155.25 cv
76.1668 154.698 76.6148 154.25 77.1668 154.25 cv
77.7188 154.25 78.1668 154.698 78.1668 155.25 cv
f
83.0832 152.833 mo
83.0832 153.385 82.6352 153.833 82.0832 153.833 cv
81.5313 153.833 81.0832 153.385 81.0832 152.833 cv
81.0832 152.281 81.5313 151.833 82.0832 151.833 cv
82.6352 151.833 83.0832 152.281 83.0832 152.833 cv
f
88 150.167 mo
88 150.719 87.552 151.167 87 151.167 cv
86.448 151.167 86 150.719 86 150.167 cv
86 149.615 86.448 149.167 87 149.167 cv
87.552 149.167 88 149.615 88 150.167 cv
f
93 147.25 mo
93 147.802 92.552 148.25 92 148.25 cv
91.448 148.25 91 147.802 91 147.25 cv
91 146.698 91.448 146.25 92 146.25 cv
92.552 146.25 93 146.698 93 147.25 cv
f
97.9168 144.167 mo
97.9168 144.719 97.4688 145.167 96.9168 145.167 cv
96.3648 145.167 95.9168 144.719 95.9168 144.167 cv
95.9168 143.615 96.3648 143.167 96.9168 143.167 cv
97.4688 143.167 97.9168 143.615 97.9168 144.167 cv
f
102.917 140.833 mo
102.917 141.385 102.469 141.833 101.917 141.833 cv
101.365 141.833 100.917 141.385 100.917 140.833 cv
100.917 140.281 101.365 139.833 101.917 139.833 cv
102.469 139.833 102.917 140.281 102.917 140.833 cv
f
107.833 137.417 mo
107.833 137.969 107.385 138.417 106.833 138.417 cv
106.281 138.417 105.833 137.969 105.833 137.417 cv
105.833 136.865 106.281 136.417 106.833 136.417 cv
107.385 136.417 107.833 136.865 107.833 137.417 cv
f
112.75 133.833 mo
112.75 134.385 112.302 134.833 111.75 134.833 cv
111.198 134.833 110.75 134.385 110.75 133.833 cv
110.75 133.281 111.198 132.833 111.75 132.833 cv
112.302 132.833 112.75 133.281 112.75 133.833 cv
f
117.75 130.25 mo
117.75 130.802 117.302 131.25 116.75 131.25 cv
116.198 131.25 115.75 130.802 115.75 130.25 cv
115.75 129.698 116.198 129.25 116.75 129.25 cv
117.302 129.25 117.75 129.698 117.75 130.25 cv
f
122.667 126.5 mo
122.667 127.052 122.219 127.5 121.667 127.5 cv
121.115 127.5 120.667 127.052 120.667 126.5 cv
120.667 125.948 121.115 125.5 121.667 125.5 cv
122.219 125.5 122.667 125.948 122.667 126.5 cv
f
127.583 122.667 mo
127.583 123.219 127.135 123.667 126.583 123.667 cv
126.031 123.667 125.583 123.219 125.583 122.667 cv
125.583 122.115 126.031 121.667 126.583 121.667 cv
127.135 121.667 127.583 122.115 127.583 122.667 cv
f
132.583 118.833 mo
132.583 119.385 132.135 119.833 131.583 119.833 cv
131.031 119.833 130.583 119.385 130.583 118.833 cv
130.583 118.281 131.031 117.833 131.583 117.833 cv
132.135 117.833 132.583 118.281 132.583 118.833 cv
f
137.5 114.917 mo
137.5 115.469 137.052 115.917 136.5 115.917 cv
135.948 115.917 135.5 115.469 135.5 114.917 cv
135.5 114.365 135.948 113.917 136.5 113.917 cv
137.052 113.917 137.5 114.365 137.5 114.917 cv
f
142.417 110.917 mo
142.417 111.469 141.969 111.917 141.417 111.917 cv
140.865 111.917 140.417 111.469 140.417 110.917 cv
140.417 110.365 140.865 109.917 141.417 109.917 cv
141.969 109.917 142.417 110.365 142.417 110.917 cv
f
147.417 106.833 mo
147.417 107.385 146.969 107.833 146.417 107.833 cv
145.865 107.833 145.417 107.385 145.417 106.833 cv
145.417 106.281 145.865 105.833 146.417 105.833 cv
146.969 105.833 147.417 106.281 147.417 106.833 cv
f
152.333 102.75 mo
152.333 103.302 151.885 103.75 151.333 103.75 cv
150.781 103.75 150.333 103.302 150.333 102.75 cv
150.333 102.198 150.781 101.75 151.333 101.75 cv
151.885 101.75 152.333 102.198 152.333 102.75 cv
f
157.333 98.6669 mo
157.333 99.2189 156.885 99.6669 156.333 99.6669 cv
155.781 99.6669 155.333 99.2189 155.333 98.6669 cv
155.333 98.1149 155.781 97.6669 156.333 97.6669 cv
156.885 97.6669 157.333 98.1149 157.333 98.6669 cv
f
162.25 94.4999 mo
162.25 95.0519 161.802 95.4999 161.25 95.4999 cv
160.698 95.4999 160.25 95.0519 160.25 94.4999 cv
160.25 93.9479 160.698 93.4999 161.25 93.4999 cv
161.802 93.4999 162.25 93.9479 162.25 94.4999 cv
f
167.167 90.3329 mo
167.167 90.8849 166.719 91.3329 166.167 91.3329 cv
165.615 91.3329 165.167 90.8849 165.167 90.3329 cv
165.167 89.7809 165.615 89.3329 166.167 89.3329 cv
166.719 89.3329 167.167 89.7809 167.167 90.3329 cv
f
172.167 86.0829 mo
172.167 86.6349 171.719 87.0829 171.167 87.0829 cv
170.615 87.0829 170.167 86.6349 170.167 86.0829 cv
170.167 85.5309 170.615 85.0829 171.167 85.0829 cv
171.719 85.0829 172.167 85.5309 172.167 86.0829 cv
f
177.083 81.8329 mo
177.083 82.3849 176.635 82.8329 176.083 82.8329 cv
175.531 82.8329 175.083 82.3849 175.083 81.8329 cv
175.083 81.2809 175.531 80.8329 176.083 80.8329 cv
176.635 80.8329 177.083 81.2809 177.083 81.8329 cv
f
182 77.4999 mo
182 78.0519 181.552 78.4999 181 78.4999 cv
180.448 78.4999 180 78.0519 180 77.4999 cv
180 76.9479 180.448 76.4999 181 76.4999 cv
181.552 76.4999 182 76.9479 182 77.4999 cv
f
187 73.1669 mo
187 73.7189 186.552 74.1669 186 74.1669 cv
185.448 74.1669 185 73.7189 185 73.1669 cv
185 72.6149 185.448 72.1669 186 72.1669 cv
186.552 72.1669 187 72.6149 187 73.1669 cv
f
191.917 68.7499 mo
191.917 69.3019 191.469 69.7499 190.917 69.7499 cv
190.365 69.7499 189.917 69.3019 189.917 68.7499 cv
189.917 68.1979 190.365 67.7499 190.917 67.7499 cv
191.469 67.7499 191.917 68.1979 191.917 68.7499 cv
f
196.917 64.4169 mo
196.917 64.9689 196.469 65.4169 195.917 65.4169 cv
195.365 65.4169 194.917 64.9689 194.917 64.4169 cv
194.917 63.8649 195.365 63.4169 195.917 63.4169 cv
196.469 63.4169 196.917 63.8649 196.917 64.4169 cv
f
53.4168 163.75 mo
53.4168 164.302 52.9688 164.75 52.4168 164.75 cv
51.8648 164.75 51.4168 164.302 51.4168 163.75 cv
51.4168 163.198 51.8648 162.75 52.4168 162.75 cv
52.9688 162.75 53.4168 163.198 53.4168 163.75 cv
.265019 .809232 3.0518e-5 3.0518e-5 cmyk
f
58.3332 163.417 mo
58.3332 163.969 57.8852 164.417 57.3332 164.417 cv
56.7813 164.417 56.3332 163.969 56.3332 163.417 cv
56.3332 162.865 56.7813 162.417 57.3332 162.417 cv
57.8852 162.417 58.3332 162.865 58.3332 163.417 cv
f
63.3332 162.833 mo
63.3332 163.385 62.8852 163.833 62.3332 163.833 cv
61.7813 163.833 61.3332 163.385 61.3332 162.833 cv
61.3332 162.281 61.7813 161.833 62.3332 161.833 cv
62.8852 161.833 63.3332 162.281 63.3332 162.833 cv
f
68.25 162 mo
68.25 162.552 67.802 163 67.25 163 cv
66.698 163 66.25 162.552 66.25 162 cv
66.25 161.448 66.698 161 67.25 161 cv
67.802 161 68.25 161.448 68.25 162 cv
f
73.1668 161 mo
73.1668 161.552 72.7188 162 72.1668 162 cv
71.6148 162 71.1668 161.552 71.1668 161 cv
71.1668 160.448 71.6148 160 72.1668 160 cv
72.7188 160 73.1668 160.448 73.1668 161 cv
f
78.1668 159.75 mo
78.1668 160.302 77.7188 160.75 77.1668 160.75 cv
76.6148 160.75 76.1668 160.302 76.1668 159.75 cv
76.1668 159.198 76.6148 158.75 77.1668 158.75 cv
77.7188 158.75 78.1668 159.198 78.1668 159.75 cv
f
83.0832 158.417 mo
83.0832 158.969 82.6352 159.417 82.0832 159.417 cv
81.5313 159.417 81.0832 158.969 81.0832 158.417 cv
81.0832 157.865 81.5313 157.417 82.0832 157.417 cv
82.6352 157.417 83.0832 157.865 83.0832 158.417 cv
f
88 156.917 mo
88 157.469 87.552 157.917 87 157.917 cv
86.448 157.917 86 157.469 86 156.917 cv
86 156.365 86.448 155.917 87 155.917 cv
87.552 155.917 88 156.365 88 156.917 cv
f
93 155.25 mo
93 155.802 92.552 156.25 92 156.25 cv
91.448 156.25 91 155.802 91 155.25 cv
91 154.698 91.448 154.25 92 154.25 cv
92.552 154.25 93 154.698 93 155.25 cv
f
97.9168 153.583 mo
97.9168 154.135 97.4688 154.583 96.9168 154.583 cv
96.3648 154.583 95.9168 154.135 95.9168 153.583 cv
95.9168 153.031 96.3648 152.583 96.9168 152.583 cv
97.4688 152.583 97.9168 153.031 97.9168 153.583 cv
f
102.917 151.667 mo
102.917 152.219 102.469 152.667 101.917 152.667 cv
101.365 152.667 100.917 152.219 100.917 151.667 cv
100.917 151.115 101.365 150.667 101.917 150.667 cv
102.469 150.667 102.917 151.115 102.917 151.667 cv
f
107.833 149.667 mo
107.833 150.219 107.385 150.667 106.833 150.667 cv
106.281 150.667 105.833 150.219 105.833 149.667 cv
105.833 149.115 106.281 148.667 106.833 148.667 cv
107.385 148.667 107.833 149.115 107.833 149.667 cv
f
112.75 147.5 mo
112.75 148.052 112.302 148.5 111.75 148.5 cv
111.198 148.5 110.75 148.052 110.75 147.5 cv
110.75 146.948 111.198 146.5 111.75 146.5 cv
112.302 146.5 112.75 146.948 112.75 147.5 cv
f
117.75 145.333 mo
117.75 145.885 117.302 146.333 116.75 146.333 cv
116.198 146.333 115.75 145.885 115.75 145.333 cv
115.75 144.781 116.198 144.333 116.75 144.333 cv
117.302 144.333 117.75 144.781 117.75 145.333 cv
f
122.667 143 mo
122.667 143.552 122.219 144 121.667 144 cv
121.115 144 120.667 143.552 120.667 143 cv
120.667 142.448 121.115 142 121.667 142 cv
122.219 142 122.667 142.448 122.667 143 cv
f
127.583 140.583 mo
127.583 141.135 127.135 141.583 126.583 141.583 cv
126.031 141.583 125.583 141.135 125.583 140.583 cv
125.583 140.031 126.031 139.583 126.583 139.583 cv
127.135 139.583 127.583 140.031 127.583 140.583 cv
f
132.583 138.083 mo
132.583 138.635 132.135 139.083 131.583 139.083 cv
131.031 139.083 130.583 138.635 130.583 138.083 cv
130.583 137.531 131.031 137.083 131.583 137.083 cv
132.135 137.083 132.583 137.531 132.583 138.083 cv
f
137.5 135.5 mo
137.5 136.052 137.052 136.5 136.5 136.5 cv
135.948 136.5 135.5 136.052 135.5 135.5 cv
135.5 134.948 135.948 134.5 136.5 134.5 cv
137.052 134.5 137.5 134.948 137.5 135.5 cv
f
142.417 132.833 mo
142.417 133.385 141.969 133.833 141.417 133.833 cv
140.865 133.833 140.417 133.385 140.417 132.833 cv
140.417 132.281 140.865 131.833 141.417 131.833 cv
141.969 131.833 142.417 132.281 142.417 132.833 cv
f
147.417 130.083 mo
147.417 130.635 146.969 131.083 146.417 131.083 cv
145.865 131.083 145.417 130.635 145.417 130.083 cv
145.417 129.531 145.865 129.083 146.417 129.083 cv
146.969 129.083 147.417 129.531 147.417 130.083 cv
f
152.333 127.333 mo
152.333 127.885 151.885 128.333 151.333 128.333 cv
150.781 128.333 150.333 127.885 150.333 127.333 cv
150.333 126.781 150.781 126.333 151.333 126.333 cv
151.885 126.333 152.333 126.781 152.333 127.333 cv
f
157.333 124.5 mo
157.333 125.052 156.885 125.5 156.333 125.5 cv
155.781 125.5 155.333 125.052 155.333 124.5 cv
155.333 123.948 155.781 123.5 156.333 123.5 cv
156.885 123.5 157.333 123.948 157.333 124.5 cv
f
162.25 121.667 mo
162.25 122.219 161.802 122.667 161.25 122.667 cv
160.698 122.667 160.25 122.219 160.25 121.667 cv
160.25 121.115 160.698 120.667 161.25 120.667 cv
161.802 120.667 162.25 121.115 162.25 121.667 cv
f
167.167 118.75 mo
167.167 119.302 166.719 119.75 166.167 119.75 cv
165.615 119.75 165.167 119.302 165.167 118.75 cv
165.167 118.198 165.615 117.75 166.167 117.75 cv
166.719 117.75 167.167 118.198 167.167 118.75 cv
f
172.167 115.75 mo
172.167 116.302 171.719 116.75 171.167 116.75 cv
170.615 116.75 170.167 116.302 170.167 115.75 cv
170.167 115.198 170.615 114.75 171.167 114.75 cv
171.719 114.75 172.167 115.198 172.167 115.75 cv
f
177.083 112.75 mo
177.083 113.302 176.635 113.75 176.083 113.75 cv
175.531 113.75 175.083 113.302 175.083 112.75 cv
175.083 112.198 175.531 111.75 176.083 111.75 cv
176.635 111.75 177.083 112.198 177.083 112.75 cv
f
182 109.667 mo
182 110.219 181.552 110.667 181 110.667 cv
180.448 110.667 180 110.219 180 109.667 cv
180 109.115 180.448 108.667 181 108.667 cv
181.552 108.667 182 109.115 182 109.667 cv
f
187 106.583 mo
187 107.135 186.552 107.583 186 107.583 cv
185.448 107.583 185 107.135 185 106.583 cv
185 106.031 185.448 105.583 186 105.583 cv
186.552 105.583 187 106.031 187 106.583 cv
f
191.917 103.5 mo
191.917 104.052 191.469 104.5 190.917 104.5 cv
190.365 104.5 189.917 104.052 189.917 103.5 cv
189.917 102.948 190.365 102.5 190.917 102.5 cv
191.469 102.5 191.917 102.948 191.917 103.5 cv
f
196.917 100.333 mo
196.917 100.885 196.469 101.333 195.917 101.333 cv
195.365 101.333 194.917 100.885 194.917 100.333 cv
194.917 99.7809 195.365 99.3329 195.917 99.3329 cv
196.469 99.3329 196.917 99.7809 196.917 100.333 cv
f
53.4168 164.333 mo
53.4168 164.885 52.9688 165.333 52.4168 165.333 cv
51.8648 165.333 51.4168 164.885 51.4168 164.333 cv
51.4168 163.781 51.8648 163.333 52.4168 163.333 cv
52.9688 163.333 53.4168 163.781 53.4168 164.333 cv
.0639048 3.0518e-5 .996094 3.0518e-5 cmyk
f
58.3332 164.667 mo
58.3332 165.219 57.8852 165.667 57.3332 165.667 cv
56.7813 165.667 56.3332 165.219 56.3332 164.667 cv
56.3332 164.115 56.7813 163.667 57.3332 163.667 cv
57.8852 163.667 58.3332 164.115 58.3332 164.667 cv
f
63.3332 164.667 mo
63.3332 165.219 62.8852 165.667 62.3332 165.667 cv
61.7813 165.667 61.3332 165.219 61.3332 164.667 cv
61.3332 164.115 61.7813 163.667 62.3332 163.667 cv
62.8852 163.667 63.3332 164.115 63.3332 164.667 cv
f
68.25 164.5 mo
68.25 165.052 67.802 165.5 67.25 165.5 cv
66.698 165.5 66.25 165.052 66.25 164.5 cv
66.25 163.948 66.698 163.5 67.25 163.5 cv
67.802 163.5 68.25 163.948 68.25 164.5 cv
f
73.1668 164.167 mo
73.1668 164.719 72.7188 165.167 72.1668 165.167 cv
71.6148 165.167 71.1668 164.719 71.1668 164.167 cv
71.1668 163.615 71.6148 163.167 72.1668 163.167 cv
72.7188 163.167 73.1668 163.615 73.1668 164.167 cv
f
78.1668 163.75 mo
78.1668 164.302 77.7188 164.75 77.1668 164.75 cv
76.6148 164.75 76.1668 164.302 76.1668 163.75 cv
76.1668 163.198 76.6148 162.75 77.1668 162.75 cv
77.7188 162.75 78.1668 163.198 78.1668 163.75 cv
f
83.0832 163.25 mo
83.0832 163.802 82.6352 164.25 82.0832 164.25 cv
81.5313 164.25 81.0832 163.802 81.0832 163.25 cv
81.0832 162.698 81.5313 162.25 82.0832 162.25 cv
82.6352 162.25 83.0832 162.698 83.0832 163.25 cv
f
88 162.583 mo
88 163.135 87.552 163.583 87 163.583 cv
86.448 163.583 86 163.135 86 162.583 cv
86 162.031 86.448 161.583 87 161.583 cv
87.552 161.583 88 162.031 88 162.583 cv
f
93 161.917 mo
93 162.469 92.552 162.917 92 162.917 cv
91.448 162.917 91 162.469 91 161.917 cv
91 161.365 91.448 160.917 92 160.917 cv
92.552 160.917 93 161.365 93 161.917 cv
f
97.9168 161.167 mo
97.9168 161.719 97.4688 162.167 96.9168 162.167 cv
96.3648 162.167 95.9168 161.719 95.9168 161.167 cv
95.9168 160.615 96.3648 160.167 96.9168 160.167 cv
97.4688 160.167 97.9168 160.615 97.9168 161.167 cv
f
102.917 160.25 mo
102.917 160.802 102.469 161.25 101.917 161.25 cv
101.365 161.25 100.917 160.802 100.917 160.25 cv
100.917 159.698 101.365 159.25 101.917 159.25 cv
102.469 159.25 102.917 159.698 102.917 160.25 cv
f
107.833 159.333 mo
107.833 159.885 107.385 160.333 106.833 160.333 cv
106.281 160.333 105.833 159.885 105.833 159.333 cv
105.833 158.781 106.281 158.333 106.833 158.333 cv
107.385 158.333 107.833 158.781 107.833 159.333 cv
f
112.75 158.333 mo
112.75 158.885 112.302 159.333 111.75 159.333 cv
111.198 159.333 110.75 158.885 110.75 158.333 cv
110.75 157.781 111.198 157.333 111.75 157.333 cv
112.302 157.333 112.75 157.781 112.75 158.333 cv
f
117.75 157.333 mo
117.75 157.885 117.302 158.333 116.75 158.333 cv
116.198 158.333 115.75 157.885 115.75 157.333 cv
115.75 156.781 116.198 156.333 116.75 156.333 cv
117.302 156.333 117.75 156.781 117.75 157.333 cv
f
122.667 156.167 mo
122.667 156.719 122.219 157.167 121.667 157.167 cv
121.115 157.167 120.667 156.719 120.667 156.167 cv
120.667 155.615 121.115 155.167 121.667 155.167 cv
122.219 155.167 122.667 155.615 122.667 156.167 cv
f
127.583 155 mo
127.583 155.552 127.135 156 126.583 156 cv
126.031 156 125.583 155.552 125.583 155 cv
125.583 154.448 126.031 154 126.583 154 cv
127.135 154 127.583 154.448 127.583 155 cv
f
132.583 153.833 mo
132.583 154.385 132.135 154.833 131.583 154.833 cv
131.031 154.833 130.583 154.385 130.583 153.833 cv
130.583 153.281 131.031 152.833 131.583 152.833 cv
132.135 152.833 132.583 153.281 132.583 153.833 cv
f
137.5 152.5 mo
137.5 153.052 137.052 153.5 136.5 153.5 cv
135.948 153.5 135.5 153.052 135.5 152.5 cv
135.5 151.948 135.948 151.5 136.5 151.5 cv
137.052 151.5 137.5 151.948 137.5 152.5 cv
f
142.417 151.167 mo
142.417 151.719 141.969 152.167 141.417 152.167 cv
140.865 152.167 140.417 151.719 140.417 151.167 cv
140.417 150.615 140.865 150.167 141.417 150.167 cv
141.969 150.167 142.417 150.615 142.417 151.167 cv
f
147.417 149.75 mo
147.417 150.302 146.969 150.75 146.417 150.75 cv
145.865 150.75 145.417 150.302 145.417 149.75 cv
145.417 149.198 145.865 148.75 146.417 148.75 cv
146.969 148.75 147.417 149.198 147.417 149.75 cv
f
152.333 148.25 mo
152.333 148.802 151.885 149.25 151.333 149.25 cv
150.781 149.25 150.333 148.802 150.333 148.25 cv
150.333 147.698 150.781 147.25 151.333 147.25 cv
151.885 147.25 152.333 147.698 152.333 148.25 cv
f
157.333 146.75 mo
157.333 147.302 156.885 147.75 156.333 147.75 cv
155.781 147.75 155.333 147.302 155.333 146.75 cv
155.333 146.198 155.781 145.75 156.333 145.75 cv
156.885 145.75 157.333 146.198 157.333 146.75 cv
f
162.25 145.25 mo
162.25 145.802 161.802 146.25 161.25 146.25 cv
160.698 146.25 160.25 145.802 160.25 145.25 cv
160.25 144.698 160.698 144.25 161.25 144.25 cv
161.802 144.25 162.25 144.698 162.25 145.25 cv
f
167.167 143.667 mo
167.167 144.219 166.719 144.667 166.167 144.667 cv
165.615 144.667 165.167 144.219 165.167 143.667 cv
165.167 143.115 165.615 142.667 166.167 142.667 cv
166.719 142.667 167.167 143.115 167.167 143.667 cv
f
172.167 142 mo
172.167 142.552 171.719 143 171.167 143 cv
170.615 143 170.167 142.552 170.167 142 cv
170.167 141.448 170.615 141 171.167 141 cv
171.719 141 172.167 141.448 172.167 142 cv
f
177.083 140.333 mo
177.083 140.885 176.635 141.333 176.083 141.333 cv
175.531 141.333 175.083 140.885 175.083 140.333 cv
175.083 139.781 175.531 139.333 176.083 139.333 cv
176.635 139.333 177.083 139.781 177.083 140.333 cv
f
182 138.583 mo
182 139.135 181.552 139.583 181 139.583 cv
180.448 139.583 180 139.135 180 138.583 cv
180 138.031 180.448 137.583 181 137.583 cv
181.552 137.583 182 138.031 182 138.583 cv
f
187 136.833 mo
187 137.385 186.552 137.833 186 137.833 cv
185.448 137.833 185 137.385 185 136.833 cv
185 136.281 185.448 135.833 186 135.833 cv
186.552 135.833 187 136.281 187 136.833 cv
f
191.917 135.083 mo
191.917 135.635 191.469 136.083 190.917 136.083 cv
190.365 136.083 189.917 135.635 189.917 135.083 cv
189.917 134.531 190.365 134.083 190.917 134.083 cv
191.469 134.083 191.917 134.531 191.917 135.083 cv
f
196.917 133.25 mo
196.917 133.802 196.469 134.25 195.917 134.25 cv
195.365 134.25 194.917 133.802 194.917 133.25 cv
194.917 132.698 195.365 132.25 195.917 132.25 cv
196.469 132.25 196.917 132.698 196.917 133.25 cv
f
53.4168 164.917 mo
53.4168 165.469 52.9688 165.917 52.4168 165.917 cv
51.8648 165.917 51.4168 165.469 51.4168 164.917 cv
51.4168 164.365 51.8648 163.917 52.4168 163.917 cv
52.9688 163.917 53.4168 164.365 53.4168 164.917 cv
1 /0 /CSD get_res sepcs
1 sep
f
58.3332 165.833 mo
58.3332 166.385 57.8852 166.833 57.3332 166.833 cv
56.7813 166.833 56.3332 166.385 56.3332 165.833 cv
56.3332 165.281 56.7813 164.833 57.3332 164.833 cv
57.8852 164.833 58.3332 165.281 58.3332 165.833 cv
f
63.3332 166.5 mo
63.3332 167.052 62.8852 167.5 62.3332 167.5 cv
61.7813 167.5 61.3332 167.052 61.3332 166.5 cv
61.3332 165.948 61.7813 165.5 62.3332 165.5 cv
62.8852 165.5 63.3332 165.948 63.3332 166.5 cv
f
68.25 167 mo
68.25 167.552 67.802 168 67.25 168 cv
66.698 168 66.25 167.552 66.25 167 cv
66.25 166.448 66.698 166 67.25 166 cv
67.802 166 68.25 166.448 68.25 167 cv
f
73.1668 167.333 mo
73.1668 167.885 72.7188 168.333 72.1668 168.333 cv
71.6148 168.333 71.1668 167.885 71.1668 167.333 cv
71.1668 166.781 71.6148 166.333 72.1668 166.333 cv
72.7188 166.333 73.1668 166.781 73.1668 167.333 cv
f
78.1668 167.583 mo
78.1668 168.135 77.7188 168.583 77.1668 168.583 cv
76.6148 168.583 76.1668 168.135 76.1668 167.583 cv
76.1668 167.031 76.6148 166.583 77.1668 166.583 cv
77.7188 166.583 78.1668 167.031 78.1668 167.583 cv
f
83.0832 167.75 mo
83.0832 168.302 82.6352 168.75 82.0832 168.75 cv
81.5313 168.75 81.0832 168.302 81.0832 167.75 cv
81.0832 167.198 81.5313 166.75 82.0832 166.75 cv
82.6352 166.75 83.0832 167.198 83.0832 167.75 cv
f
88 167.833 mo
88 168.385 87.552 168.833 87 168.833 cv
86.448 168.833 86 168.385 86 167.833 cv
86 167.281 86.448 166.833 87 166.833 cv
87.552 166.833 88 167.281 88 167.833 cv
f
93 167.917 mo
93 168.469 92.552 168.917 92 168.917 cv
91.448 168.917 91 168.469 91 167.917 cv
91 167.365 91.448 166.917 92 166.917 cv
92.552 166.917 93 167.365 93 167.917 cv
f
97.9168 167.917 mo
97.9168 168.469 97.4688 168.917 96.9168 168.917 cv
96.3648 168.917 95.9168 168.469 95.9168 167.917 cv
95.9168 167.365 96.3648 166.917 96.9168 166.917 cv
97.4688 166.917 97.9168 167.365 97.9168 167.917 cv
f
102.917 167.833 mo
102.917 168.385 102.469 168.833 101.917 168.833 cv
101.365 168.833 100.917 168.385 100.917 167.833 cv
100.917 167.281 101.365 166.833 101.917 166.833 cv
102.469 166.833 102.917 167.281 102.917 167.833 cv
f
107.833 167.75 mo
107.833 168.302 107.385 168.75 106.833 168.75 cv
106.281 168.75 105.833 168.302 105.833 167.75 cv
105.833 167.198 106.281 166.75 106.833 166.75 cv
107.385 166.75 107.833 167.198 107.833 167.75 cv
f
112.75 167.583 mo
112.75 168.135 112.302 168.583 111.75 168.583 cv
111.198 168.583 110.75 168.135 110.75 167.583 cv
110.75 167.031 111.198 166.583 111.75 166.583 cv
112.302 166.583 112.75 167.031 112.75 167.583 cv
f
117.75 167.417 mo
117.75 167.969 117.302 168.417 116.75 168.417 cv
116.198 168.417 115.75 167.969 115.75 167.417 cv
115.75 166.865 116.198 166.417 116.75 166.417 cv
117.302 166.417 117.75 166.865 117.75 167.417 cv
f
122.667 167.167 mo
122.667 167.719 122.219 168.167 121.667 168.167 cv
121.115 168.167 120.667 167.719 120.667 167.167 cv
120.667 166.615 121.115 166.167 121.667 166.167 cv
122.219 166.167 122.667 166.615 122.667 167.167 cv
f
127.583 166.917 mo
127.583 167.469 127.135 167.917 126.583 167.917 cv
126.031 167.917 125.583 167.469 125.583 166.917 cv
125.583 166.365 126.031 165.917 126.583 165.917 cv
127.135 165.917 127.583 166.365 127.583 166.917 cv
f
132.583 166.583 mo
132.583 167.135 132.135 167.583 131.583 167.583 cv
131.031 167.583 130.583 167.135 130.583 166.583 cv
130.583 166.031 131.031 165.583 131.583 165.583 cv
132.135 165.583 132.583 166.031 132.583 166.583 cv
f
137.5 166.25 mo
137.5 166.802 137.052 167.25 136.5 167.25 cv
135.948 167.25 135.5 166.802 135.5 166.25 cv
135.5 165.698 135.948 165.25 136.5 165.25 cv
137.052 165.25 137.5 165.698 137.5 166.25 cv
f
142.417 165.833 mo
142.417 166.385 141.969 166.833 141.417 166.833 cv
140.865 166.833 140.417 166.385 140.417 165.833 cv
140.417 165.281 140.865 164.833 141.417 164.833 cv
141.969 164.833 142.417 165.281 142.417 165.833 cv
f
147.417 165.417 mo
147.417 165.969 146.969 166.417 146.417 166.417 cv
145.865 166.417 145.417 165.969 145.417 165.417 cv
145.417 164.865 145.865 164.417 146.417 164.417 cv
146.969 164.417 147.417 164.865 147.417 165.417 cv
f
152.333 164.917 mo
152.333 165.469 151.885 165.917 151.333 165.917 cv
150.781 165.917 150.333 165.469 150.333 164.917 cv
150.333 164.365 150.781 163.917 151.333 163.917 cv
151.885 163.917 152.333 164.365 152.333 164.917 cv
f
157.333 164.5 mo
157.333 165.052 156.885 165.5 156.333 165.5 cv
155.781 165.5 155.333 165.052 155.333 164.5 cv
155.333 163.948 155.781 163.5 156.333 163.5 cv
156.885 163.5 157.333 163.948 157.333 164.5 cv
f
162.25 163.917 mo
162.25 164.469 161.802 164.917 161.25 164.917 cv
160.698 164.917 160.25 164.469 160.25 163.917 cv
160.25 163.365 160.698 162.917 161.25 162.917 cv
161.802 162.917 162.25 163.365 162.25 163.917 cv
f
167.167 163.417 mo
167.167 163.969 166.719 164.417 166.167 164.417 cv
165.615 164.417 165.167 163.969 165.167 163.417 cv
165.167 162.865 165.615 162.417 166.167 162.417 cv
166.719 162.417 167.167 162.865 167.167 163.417 cv
f
172.167 162.833 mo
172.167 163.385 171.719 163.833 171.167 163.833 cv
170.615 163.833 170.167 163.385 170.167 162.833 cv
170.167 162.281 170.615 161.833 171.167 161.833 cv
171.719 161.833 172.167 162.281 172.167 162.833 cv
f
177.083 162.25 mo
177.083 162.802 176.635 163.25 176.083 163.25 cv
175.531 163.25 175.083 162.802 175.083 162.25 cv
175.083 161.698 175.531 161.25 176.083 161.25 cv
176.635 161.25 177.083 161.698 177.083 162.25 cv
f
182 161.583 mo
182 162.135 181.552 162.583 181 162.583 cv
180.448 162.583 180 162.135 180 161.583 cv
180 161.031 180.448 160.583 181 160.583 cv
181.552 160.583 182 161.031 182 161.583 cv
f
187 160.917 mo
187 161.469 186.552 161.917 186 161.917 cv
185.448 161.917 185 161.469 185 160.917 cv
185 160.365 185.448 159.917 186 159.917 cv
186.552 159.917 187 160.365 187 160.917 cv
f
191.917 160.25 mo
191.917 160.802 191.469 161.25 190.917 161.25 cv
190.365 161.25 189.917 160.802 189.917 160.25 cv
189.917 159.698 190.365 159.25 190.917 159.25 cv
191.469 159.25 191.917 159.698 191.917 160.25 cv
f
196.917 159.583 mo
196.917 160.135 196.469 160.583 195.917 160.583 cv
195.365 160.583 194.917 160.135 194.917 159.583 cv
194.917 159.031 195.365 158.583 195.917 158.583 cv
196.469 158.583 196.917 159.031 196.917 159.583 cv
f
grestore
gsave
47.5 9.91699 mo
47.5 194 li
196 194 li
196 9.91699 li
cp
clp
[6 6 ] 0 dsh
52.4168 170 mo
57.3332 170.667 li
62.3332 171.333 li
67.25 172 li
72.1668 172.667 li
77.1668 173.333 li
82.0832 174 li
87 174.75 li
92 175.417 li
96.9168 176.167 li
101.917 176.833 li
106.833 177.5 li
111.75 178.25 li
116.75 178.917 li
121.667 179.667 li
126.583 180.417 li
131.583 181.083 li
136.5 181.833 li
141.417 182.583 li
146.417 183.25 li
151.333 184 li
156.333 184.75 li
161.25 185.5 li
166.167 186.25 li
171.167 187 li
176.083 187.75 li
181 188.5 li
186 189.25 li
190.917 189.917 li
195.917 190.75 li
3.0518e-5 .990631 1 .000396735 cmyk
@
grestore
gsave
0 779 mo
0 -57 li
593.7 -57 li
593.7 779 li
cp
clp
%%IncludeResource: font Helvetica
/WLYIZO+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /.notdef 
/two /.notdef /four /.notdef /six 14{/.notdef}rp /E /F 
4{/.notdef}rp /K 8{/.notdef}rp /T /.notdef /V 4{/.notdef}rp /bracketleft 
/.notdef /bracketright 3{/.notdef}rp /a 3{/.notdef}rp /e 3{/.notdef}rp /i 
3{/.notdef}rp /m 2{/.notdef}rp /p /.notdef /r /.notdef /t 
/u 138{/.notdef}rp]
WLYIZO+Helvetica nf
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
84.75 217.917 mo
(Temperature  [K])
[6.10992 5.56 8.32993 5.56 5.56 3.32993 5.56 2.78 5.56 3.32993 5.56 2.78 
2.78 2.78 6.66992 0 ]xsh
WLYIZO+Helvetica*1 [0 -10 -10 0 0 0 ]msf
16.0832 127.917 mo
(E)sh
WLYIZO+Helvetica*1 [0 -8 -8 0 0 0 ]msf
21.0832 121.25 mo
(F)sh
WLYIZO+Helvetica*1 [0 -10 -10 0 0 0 ]msf
16.0832 116.417 mo
( - E)
[-2.78003 -3.3299 -2.72357 0 ]ysh
WLYIZO+Helvetica*1 [0 -8 -8 0 0 0 ]msf
21.0832 100.917 mo
(i)sh
WLYIZO+Helvetica*1 [0 -10 -10 0 0 0 ]msf
16.0832 99.1669 mo
(  [eV])
[-2.75 -2.78003 -2.77997 -5.56 -6.66992 0 ]ysh
50.4168 33.5829 mo
95.3332 33.5829 li
95.3332 16.9998 li
50.4168 16.9998 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
0 lj
50.4168 33.5829 mo
95.3332 33.5829 li
95.3332 16.9998 li
50.4168 16.9998 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%%IncludeResource: font Helvetica
/WLYIZO+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /.notdef 
/two /.notdef /four /.notdef /six 12{/.notdef}rp /C /.notdef 
/E /F 2{/.notdef}rp /I /.notdef /K 7{/.notdef}rp /S 
/T /.notdef /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp 
/a 3{/.notdef}rp /e 3{/.notdef}rp /i 3{/.notdef}rp /m /n 
/.notdef /p /.notdef /r /.notdef /t /u 138{/.notdef}rp]
WLYIZO+Helvetica nf
WLYIZO+Helvetica*1 [11 0 0 -11 0 0 ]msf
52.4168 29.1669 mo
(CuInSe)
[7.94183 6.116 3.058 6.116 7.33691 0 ]xsh
WLYIZO+Helvetica*1 [8 0 0 -8 0 0 ]msf
89.0832 29.1669 mo
(2)sh
170.167 163.667 mo
185.333 163.667 li
185.333 150.583 li
170.167 150.583 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
%%IncludeResource: font Helvetica
/WLYIZO+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /.notdef /four /.notdef /six 2{/.notdef}rp /nine 9{/.notdef}rp 
/C /.notdef /E /F 2{/.notdef}rp /I /.notdef /K 
7{/.notdef}rp /S /T /.notdef /V 4{/.notdef}rp /bracketleft /.notdef 
/bracketright 3{/.notdef}rp /a 3{/.notdef}rp /e 3{/.notdef}rp /i 3{/.notdef}rp 
/m /n /.notdef /p /.notdef /r /.notdef /t 
/u 138{/.notdef}rp]
WLYIZO+Helvetica nf
WLYIZO+Helvetica*1 [7 0 0 -7 0 0 ]msf
171.167 161.167 mo
(10)
[3.892 0 ]xsh
WLYIZO+Helvetica*1 [5 0 0 -5 0 0 ]msf
178.917 156.167 mo
(19)
[2.75 0 ]xsh
170.167 111.5 mo
185.333 111.5 li
185.333 98.4167 li
170.167 98.4167 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
%%IncludeResource: font Helvetica
/WLYIZO+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /.notdef /four /.notdef /six /seven /.notdef /nine 
9{/.notdef}rp /C /.notdef /E /F 2{/.notdef}rp /I /.notdef 
/K 7{/.notdef}rp /S /T /.notdef /V 4{/.notdef}rp /bracketleft 
/.notdef /bracketright 3{/.notdef}rp /a 3{/.notdef}rp /e 3{/.notdef}rp /i 
3{/.notdef}rp /m /n /.notdef /p /.notdef /r /.notdef 
/t /u 138{/.notdef}rp]
WLYIZO+Helvetica nf
WLYIZO+Helvetica*1 [7 0 0 -7 0 0 ]msf
171.167 109 mo
(10)
[3.892 0 ]xsh
WLYIZO+Helvetica*1 [5 0 0 -5 0 0 ]msf
178.917 104 mo
(17)
[2.75 0 ]xsh
133 93.1669 mo
148.167 93.1669 li
148.167 80.0834 li
133 80.0834 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
%%IncludeResource: font Helvetica
/WLYIZO+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /.notdef /four /five /six /seven /.notdef /nine 
9{/.notdef}rp /C /.notdef /E /F 2{/.notdef}rp /I /.notdef 
/K 7{/.notdef}rp /S /T /.notdef /V 4{/.notdef}rp /bracketleft 
/.notdef /bracketright 3{/.notdef}rp /a 3{/.notdef}rp /e 3{/.notdef}rp /i 
3{/.notdef}rp /m /n /.notdef /p /.notdef /r /.notdef 
/t /u 138{/.notdef}rp]
WLYIZO+Helvetica nf
WLYIZO+Helvetica*1 [7 0 0 -7 0 0 ]msf
134 90.6669 mo
(10)
[3.892 0 ]xsh
WLYIZO+Helvetica*1 [5 0 0 -5 0 0 ]msf
141.75 85.6669 mo
(15)
[2.75 0 ]xsh
92 92.1669 mo
105.167 92.1669 li
105.167 81.0834 li
92 81.0834 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
%%IncludeResource: font Helvetica
/WLYIZO+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /three /four /five /six /seven /.notdef /nine 
9{/.notdef}rp /C /.notdef /E /F 2{/.notdef}rp /I /.notdef 
/K 7{/.notdef}rp /S /T /.notdef /V 4{/.notdef}rp /bracketleft 
/.notdef /bracketright 3{/.notdef}rp /a 3{/.notdef}rp /e 3{/.notdef}rp /i 
3{/.notdef}rp /m /n /.notdef /p /.notdef /r /.notdef 
/t /u 138{/.notdef}rp]
WLYIZO+Helvetica nf
WLYIZO+Helvetica*1 [7 0 0 -7 0 0 ]msf
92 90.6669 mo
(10)
[3.892 0 ]xsh
WLYIZO+Helvetica*1 [5 0 0 -5 0 0 ]msf
99.75 85.6669 mo
(13)
[2.75 0 ]xsh
237.5 193.917 mo
385.917 193.917 li
385.917 9.91693 li
237.5 9.91693 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 lj
237.5 193.917 mo
237.5 9.91693 li
385.917 9.91693 li
385.917 193.917 li
237.5 193.917 li
@
237.5 9.91693 mo
385.917 9.91693 li
1 /0 /CSD get_res sepcs
1 sep
@
237.5 193.917 mo
385.917 193.917 li
@
385.917 193.917 mo
385.917 9.91693 li
@
237.5 193.917 mo
237.5 9.91693 li
@
237.5 193.917 mo
385.917 193.917 li
@
237.5 193.917 mo
237.5 9.91693 li
@
237.5 193.917 mo
237.5 188.75 li
@
237.5 9.91693 mo
237.5 14.9999 li
@
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
234.75 206 mo
(0)sh
286.917 193.917 mo
286.917 188.75 li
@
286.917 9.91693 mo
286.917 14.9999 li
@
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
278.583 206 mo
(200)
[5.56 5.56 0 ]xsh
336.417 193.917 mo
336.417 188.75 li
@
336.417 9.91693 mo
336.417 14.9999 li
@
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
328.083 206 mo
(400)
[5.56 5.56 0 ]xsh
385.917 193.917 mo
385.917 188.75 li
@
385.917 9.91693 mo
385.917 14.9999 li
@
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
377.583 206 mo
(600)
[5.56 5.56 0 ]xsh
237.5 193.917 mo
242.583 193.917 li
@
385.917 193.917 mo
380.75 193.917 li
@
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
211.833 197.583 mo
(-0.75)
[3.32993 5.56 2.78 5.56 0 ]xsh
237.5 132.583 mo
242.583 132.583 li
@
385.917 132.583 mo
380.75 132.583 li
@
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
217.417 136.25 mo
(-0.5)
[3.32993 5.56 2.78 0 ]xsh
237.5 71.2499 mo
242.583 71.2499 li
@
385.917 71.2499 mo
380.75 71.2499 li
@
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
211.833 74.9169 mo
(-0.25)
[3.32993 5.56 2.78 5.56 0 ]xsh
237.5 9.91693 mo
242.583 9.91693 li
@
385.917 9.91693 mo
380.75 9.91693 li
@
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
229.083 13.5829 mo
(0)sh
237.5 9.91693 mo
385.917 9.91693 li
@
237.5 193.917 mo
385.917 193.917 li
@
385.917 193.917 mo
385.917 9.91693 li
@
237.5 193.917 mo
237.5 9.91693 li
@
grestore
gsave
237.5 9.91699 mo
237.5 194 li
386 194 li
386 9.91699 li
cp
clp
242.417 164.667 mo
247.333 162.417 li
252.333 159.167 li
257.25 154.667 li
262.167 149.667 li
267.167 144.083 li
272.083 138.167 li
277 132.167 li
282 126.083 li
286.917 119.833 li
291.917 113.583 li
296.833 107.167 li
301.75 100.75 li
306.75 94.1669 li
311.667 87.5829 li
316.583 80.9169 li
321.583 74.2499 li
326.5 67.4999 li
331.417 60.6669 li
336.417 53.8329 li
341.333 46.9169 li
346.333 39.9169 li
351.25 32.9999 li
356.167 26.3329 li
361.167 20.4999 li
366.083 16.2499 li
371 13.6669 li
376 12.2499 li
380.917 11.4169 li
385.917 10.9999 li
.895628 .7673 3.0518e-5 3.0518e-5 cmyk
@
242.417 165.167 mo
247.333 163.333 li
252.333 161.083 li
257.25 157.833 li
262.167 154 li
267.167 149.667 li
272.083 144.917 li
277 139.917 li
282 134.833 li
286.917 129.583 li
291.917 124.25 li
296.833 118.833 li
301.75 113.333 li
306.75 107.833 li
311.667 102.167 li
316.583 96.4999 li
321.583 90.7499 li
326.5 84.9999 li
331.417 79.1669 li
336.417 73.2499 li
341.333 67.3329 li
346.333 61.3329 li
351.25 55.3329 li
356.167 49.2499 li
361.167 43.1669 li
366.083 37.0829 li
371 31.0829 li
376 25.4999 li
380.917 20.8329 li
385.917 17.3329 li
.627314 3.0518e-5 1 3.0518e-5 cmyk
@
242.417 165.667 mo
247.333 164.333 li
252.333 162.75 li
257.25 160.583 li
262.167 157.833 li
267.167 154.75 li
272.083 151.333 li
277 147.5 li
282 143.5 li
286.917 139.25 li
291.917 134.917 li
296.833 130.5 li
301.75 126 li
306.75 121.417 li
311.667 116.833 li
316.583 112.083 li
321.583 107.333 li
326.5 102.5 li
331.417 97.6669 li
336.417 92.7499 li
341.333 87.7499 li
346.333 82.7499 li
351.25 77.7499 li
356.167 72.5829 li
361.167 67.4999 li
366.083 62.3329 li
371 57.0829 li
376 51.8329 li
380.917 46.5829 li
385.917 41.3329 li
3.0518e-5 .990631 1 .000396735 cmyk
@
242.417 166.167 mo
247.333 165.333 li
252.333 164.25 li
257.25 162.833 li
262.167 161.167 li
267.167 159.083 li
272.083 156.833 li
277 154.25 li
282 151.5 li
286.917 148.5 li
291.917 145.333 li
296.833 141.917 li
301.75 138.5 li
306.75 134.917 li
311.667 131.333 li
316.583 127.583 li
321.583 123.833 li
326.5 120 li
331.417 116.083 li
336.417 112.167 li
341.333 108.167 li
346.333 104.167 li
351.25 100.083 li
356.167 95.9999 li
361.167 91.8329 li
366.083 87.5829 li
371 83.3329 li
376 79.0829 li
380.917 74.7499 li
385.917 70.4169 li
.520012 3.0518e-5 .126131 3.0518e-5 cmyk
@
242.417 166.583 mo
247.333 166.333 li
252.333 165.75 li
257.25 164.917 li
262.167 163.917 li
267.167 162.75 li
272.083 161.417 li
277 159.833 li
282 158.167 li
286.917 156.333 li
291.917 154.417 li
296.833 152.25 li
301.75 150 li
306.75 147.667 li
311.667 145.167 li
316.583 142.5 li
321.583 139.833 li
326.5 137.083 li
331.417 134.25 li
336.417 131.333 li
341.333 128.333 li
346.333 125.333 li
351.25 122.25 li
356.167 119.083 li
361.167 115.917 li
366.083 112.75 li
371 109.5 li
376 106.167 li
380.917 102.833 li
385.917 99.4999 li
.265019 .809232 3.0518e-5 3.0518e-5 cmyk
@
242.417 167.083 mo
247.333 167.25 li
252.333 167.167 li
257.25 166.917 li
262.167 166.5 li
267.167 165.917 li
272.083 165.25 li
277 164.5 li
282 163.667 li
286.917 162.75 li
291.917 161.667 li
296.833 160.583 li
301.75 159.333 li
306.75 158.083 li
311.667 156.667 li
316.583 155.25 li
321.583 153.667 li
326.5 152.083 li
331.417 150.417 li
336.417 148.667 li
341.333 146.833 li
346.333 144.917 li
351.25 142.917 li
356.167 140.917 li
361.167 138.833 li
366.083 136.75 li
371 134.5 li
376 132.333 li
380.917 130 li
385.917 127.667 li
.0639048 3.0518e-5 .996094 3.0518e-5 cmyk
@
242.417 167.583 mo
247.333 168.25 li
252.333 168.667 li
257.25 168.833 li
262.167 168.917 li
267.167 169 li
272.083 168.917 li
277 168.75 li
282 168.5 li
286.917 168.167 li
291.917 167.833 li
296.833 167.5 li
301.75 167 li
306.75 166.5 li
311.667 165.917 li
316.583 165.333 li
321.583 164.667 li
326.5 164 li
331.417 163.167 li
336.417 162.417 li
341.333 161.583 li
346.333 160.667 li
351.25 159.75 li
356.167 158.75 li
361.167 157.75 li
366.083 156.667 li
371 155.583 li
376 154.417 li
380.917 153.167 li
385.917 152 li
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
0 779 mo
0 -57 li
593.7 -57 li
593.7 779 li
cp
clp
243.417 164.667 mo
243.417 165.219 242.969 165.667 242.417 165.667 cv
241.865 165.667 241.417 165.219 241.417 164.667 cv
241.417 164.115 241.865 163.667 242.417 163.667 cv
242.969 163.667 243.417 164.115 243.417 164.667 cv
.895628 .7673 3.0518e-5 3.0518e-5 cmyk
f
248.333 162.417 mo
248.333 162.969 247.885 163.417 247.333 163.417 cv
246.781 163.417 246.333 162.969 246.333 162.417 cv
246.333 161.865 246.781 161.417 247.333 161.417 cv
247.885 161.417 248.333 161.865 248.333 162.417 cv
f
253.333 159.5 mo
253.333 160.052 252.885 160.5 252.333 160.5 cv
251.781 160.5 251.333 160.052 251.333 159.5 cv
251.333 158.948 251.781 158.5 252.333 158.5 cv
252.885 158.5 253.333 158.948 253.333 159.5 cv
f
258.25 155.333 mo
258.25 155.885 257.802 156.333 257.25 156.333 cv
256.698 156.333 256.25 155.885 256.25 155.333 cv
256.25 154.781 256.698 154.333 257.25 154.333 cv
257.802 154.333 258.25 154.781 258.25 155.333 cv
f
263.167 150.833 mo
263.167 151.385 262.719 151.833 262.167 151.833 cv
261.615 151.833 261.167 151.385 261.167 150.833 cv
261.167 150.281 261.615 149.833 262.167 149.833 cv
262.719 149.833 263.167 150.281 263.167 150.833 cv
f
268.167 145.667 mo
268.167 146.219 267.719 146.667 267.167 146.667 cv
266.615 146.667 266.167 146.219 266.167 145.667 cv
266.167 145.115 266.615 144.667 267.167 144.667 cv
267.719 144.667 268.167 145.115 268.167 145.667 cv
f
273.083 140.167 mo
273.083 140.719 272.635 141.167 272.083 141.167 cv
271.531 141.167 271.083 140.719 271.083 140.167 cv
271.083 139.615 271.531 139.167 272.083 139.167 cv
272.635 139.167 273.083 139.615 273.083 140.167 cv
f
278 134.5 mo
278 135.052 277.552 135.5 277 135.5 cv
276.448 135.5 276 135.052 276 134.5 cv
276 133.948 276.448 133.5 277 133.5 cv
277.552 133.5 278 133.948 278 134.5 cv
f
283 128.667 mo
283 129.219 282.552 129.667 282 129.667 cv
281.448 129.667 281 129.219 281 128.667 cv
281 128.115 281.448 127.667 282 127.667 cv
282.552 127.667 283 128.115 283 128.667 cv
f
287.917 122.833 mo
287.917 123.385 287.469 123.833 286.917 123.833 cv
286.365 123.833 285.917 123.385 285.917 122.833 cv
285.917 122.281 286.365 121.833 286.917 121.833 cv
287.469 121.833 287.917 122.281 287.917 122.833 cv
f
292.917 116.833 mo
292.917 117.385 292.469 117.833 291.917 117.833 cv
291.365 117.833 290.917 117.385 290.917 116.833 cv
290.917 116.281 291.365 115.833 291.917 115.833 cv
292.469 115.833 292.917 116.281 292.917 116.833 cv
f
297.833 110.75 mo
297.833 111.302 297.385 111.75 296.833 111.75 cv
296.281 111.75 295.833 111.302 295.833 110.75 cv
295.833 110.198 296.281 109.75 296.833 109.75 cv
297.385 109.75 297.833 110.198 297.833 110.75 cv
f
302.75 104.667 mo
302.75 105.219 302.302 105.667 301.75 105.667 cv
301.198 105.667 300.75 105.219 300.75 104.667 cv
300.75 104.115 301.198 103.667 301.75 103.667 cv
302.302 103.667 302.75 104.115 302.75 104.667 cv
f
307.75 98.4169 mo
307.75 98.9689 307.302 99.4169 306.75 99.4169 cv
306.198 99.4169 305.75 98.9689 305.75 98.4169 cv
305.75 97.8649 306.198 97.4169 306.75 97.4169 cv
307.302 97.4169 307.75 97.8649 307.75 98.4169 cv
f
312.667 92.1669 mo
312.667 92.7189 312.219 93.1669 311.667 93.1669 cv
311.115 93.1669 310.667 92.7189 310.667 92.1669 cv
310.667 91.6149 311.115 91.1669 311.667 91.1669 cv
312.219 91.1669 312.667 91.6149 312.667 92.1669 cv
f
317.583 85.9169 mo
317.583 86.4689 317.135 86.9169 316.583 86.9169 cv
316.031 86.9169 315.583 86.4689 315.583 85.9169 cv
315.583 85.3649 316.031 84.9169 316.583 84.9169 cv
317.135 84.9169 317.583 85.3649 317.583 85.9169 cv
f
322.583 79.5829 mo
322.583 80.1349 322.135 80.5829 321.583 80.5829 cv
321.031 80.5829 320.583 80.1349 320.583 79.5829 cv
320.583 79.0309 321.031 78.5829 321.583 78.5829 cv
322.135 78.5829 322.583 79.0309 322.583 79.5829 cv
f
327.5 73.1669 mo
327.5 73.7189 327.052 74.1669 326.5 74.1669 cv
325.948 74.1669 325.5 73.7189 325.5 73.1669 cv
325.5 72.6149 325.948 72.1669 326.5 72.1669 cv
327.052 72.1669 327.5 72.6149 327.5 73.1669 cv
f
332.417 66.7499 mo
332.417 67.3019 331.969 67.7499 331.417 67.7499 cv
330.865 67.7499 330.417 67.3019 330.417 66.7499 cv
330.417 66.1979 330.865 65.7499 331.417 65.7499 cv
331.969 65.7499 332.417 66.1979 332.417 66.7499 cv
f
337.417 60.2499 mo
337.417 60.8019 336.969 61.2499 336.417 61.2499 cv
335.865 61.2499 335.417 60.8019 335.417 60.2499 cv
335.417 59.6979 335.865 59.2499 336.417 59.2499 cv
336.969 59.2499 337.417 59.6979 337.417 60.2499 cv
f
342.333 53.7499 mo
342.333 54.3019 341.885 54.7499 341.333 54.7499 cv
340.781 54.7499 340.333 54.3019 340.333 53.7499 cv
340.333 53.1979 340.781 52.7499 341.333 52.7499 cv
341.885 52.7499 342.333 53.1979 342.333 53.7499 cv
f
347.333 47.2499 mo
347.333 47.8019 346.885 48.2499 346.333 48.2499 cv
345.781 48.2499 345.333 47.8019 345.333 47.2499 cv
345.333 46.6979 345.781 46.2499 346.333 46.2499 cv
346.885 46.2499 347.333 46.6979 347.333 47.2499 cv
f
352.25 40.6669 mo
352.25 41.2189 351.802 41.6669 351.25 41.6669 cv
350.698 41.6669 350.25 41.2189 350.25 40.6669 cv
350.25 40.1149 350.698 39.6669 351.25 39.6669 cv
351.802 39.6669 352.25 40.1149 352.25 40.6669 cv
f
357.167 34.0829 mo
357.167 34.6349 356.719 35.0829 356.167 35.0829 cv
355.615 35.0829 355.167 34.6349 355.167 34.0829 cv
355.167 33.5309 355.615 33.0829 356.167 33.0829 cv
356.719 33.0829 357.167 33.5309 357.167 34.0829 cv
f
362.167 27.7499 mo
362.167 28.3019 361.719 28.7499 361.167 28.7499 cv
360.615 28.7499 360.167 28.3019 360.167 27.7499 cv
360.167 27.1979 360.615 26.7499 361.167 26.7499 cv
361.719 26.7499 362.167 27.1979 362.167 27.7499 cv
f
367.083 22.0829 mo
367.083 22.6349 366.635 23.0829 366.083 23.0829 cv
365.531 23.0829 365.083 22.6349 365.083 22.0829 cv
365.083 21.5309 365.531 21.0829 366.083 21.0829 cv
366.635 21.0829 367.083 21.5309 367.083 22.0829 cv
f
372 17.6669 mo
372 18.2189 371.552 18.6669 371 18.6669 cv
370.448 18.6669 370 18.2189 370 17.6669 cv
370 17.1149 370.448 16.6669 371 16.6669 cv
371.552 16.6669 372 17.1149 372 17.6669 cv
f
377 14.7499 mo
377 15.3019 376.552 15.7499 376 15.7499 cv
375.448 15.7499 375 15.3019 375 14.7499 cv
375 14.1979 375.448 13.7499 376 13.7499 cv
376.552 13.7499 377 14.1979 377 14.7499 cv
f
381.917 12.9999 mo
381.917 13.5519 381.469 13.9999 380.917 13.9999 cv
380.365 13.9999 379.917 13.5519 379.917 12.9999 cv
379.917 12.4479 380.365 11.9999 380.917 11.9999 cv
381.469 11.9999 381.917 12.4479 381.917 12.9999 cv
f
386.917 11.9999 mo
386.917 12.5519 386.469 12.9999 385.917 12.9999 cv
385.365 12.9999 384.917 12.5519 384.917 11.9999 cv
384.917 11.4479 385.365 10.9999 385.917 10.9999 cv
386.469 10.9999 386.917 11.4479 386.917 11.9999 cv
f
243.417 165.167 mo
243.417 165.719 242.969 166.167 242.417 166.167 cv
241.865 166.167 241.417 165.719 241.417 165.167 cv
241.417 164.615 241.865 164.167 242.417 164.167 cv
242.969 164.167 243.417 164.615 243.417 165.167 cv
.627314 3.0518e-5 1 3.0518e-5 cmyk
f
248.333 163.417 mo
248.333 163.969 247.885 164.417 247.333 164.417 cv
246.781 164.417 246.333 163.969 246.333 163.417 cv
246.333 162.865 246.781 162.417 247.333 162.417 cv
247.885 162.417 248.333 162.865 248.333 163.417 cv
f
253.333 161.25 mo
253.333 161.802 252.885 162.25 252.333 162.25 cv
251.781 162.25 251.333 161.802 251.333 161.25 cv
251.333 160.698 251.781 160.25 252.333 160.25 cv
252.885 160.25 253.333 160.698 253.333 161.25 cv
f
258.25 158.333 mo
258.25 158.885 257.802 159.333 257.25 159.333 cv
256.698 159.333 256.25 158.885 256.25 158.333 cv
256.25 157.781 256.698 157.333 257.25 157.333 cv
257.802 157.333 258.25 157.781 258.25 158.333 cv
f
263.167 154.833 mo
263.167 155.385 262.719 155.833 262.167 155.833 cv
261.615 155.833 261.167 155.385 261.167 154.833 cv
261.167 154.281 261.615 153.833 262.167 153.833 cv
262.719 153.833 263.167 154.281 263.167 154.833 cv
f
268.167 151.083 mo
268.167 151.635 267.719 152.083 267.167 152.083 cv
266.615 152.083 266.167 151.635 266.167 151.083 cv
266.167 150.531 266.615 150.083 267.167 150.083 cv
267.719 150.083 268.167 150.531 268.167 151.083 cv
f
273.083 146.833 mo
273.083 147.385 272.635 147.833 272.083 147.833 cv
271.531 147.833 271.083 147.385 271.083 146.833 cv
271.083 146.281 271.531 145.833 272.083 145.833 cv
272.635 145.833 273.083 146.281 273.083 146.833 cv
f
278 142.167 mo
278 142.719 277.552 143.167 277 143.167 cv
276.448 143.167 276 142.719 276 142.167 cv
276 141.615 276.448 141.167 277 141.167 cv
277.552 141.167 278 141.615 278 142.167 cv
f
283 137.417 mo
283 137.969 282.552 138.417 282 138.417 cv
281.448 138.417 281 137.969 281 137.417 cv
281 136.865 281.448 136.417 282 136.417 cv
282.552 136.417 283 136.865 283 137.417 cv
f
287.917 132.5 mo
287.917 133.052 287.469 133.5 286.917 133.5 cv
286.365 133.5 285.917 133.052 285.917 132.5 cv
285.917 131.948 286.365 131.5 286.917 131.5 cv
287.469 131.5 287.917 131.948 287.917 132.5 cv
f
292.917 127.5 mo
292.917 128.052 292.469 128.5 291.917 128.5 cv
291.365 128.5 290.917 128.052 290.917 127.5 cv
290.917 126.948 291.365 126.5 291.917 126.5 cv
292.469 126.5 292.917 126.948 292.917 127.5 cv
f
297.833 122.417 mo
297.833 122.969 297.385 123.417 296.833 123.417 cv
296.281 123.417 295.833 122.969 295.833 122.417 cv
295.833 121.865 296.281 121.417 296.833 121.417 cv
297.385 121.417 297.833 121.865 297.833 122.417 cv
f
302.75 117.25 mo
302.75 117.802 302.302 118.25 301.75 118.25 cv
301.198 118.25 300.75 117.802 300.75 117.25 cv
300.75 116.698 301.198 116.25 301.75 116.25 cv
302.302 116.25 302.75 116.698 302.75 117.25 cv
f
307.75 112.083 mo
307.75 112.635 307.302 113.083 306.75 113.083 cv
306.198 113.083 305.75 112.635 305.75 112.083 cv
305.75 111.531 306.198 111.083 306.75 111.083 cv
307.302 111.083 307.75 111.531 307.75 112.083 cv
f
312.667 106.833 mo
312.667 107.385 312.219 107.833 311.667 107.833 cv
311.115 107.833 310.667 107.385 310.667 106.833 cv
310.667 106.281 311.115 105.833 311.667 105.833 cv
312.219 105.833 312.667 106.281 312.667 106.833 cv
f
317.583 101.5 mo
317.583 102.052 317.135 102.5 316.583 102.5 cv
316.031 102.5 315.583 102.052 315.583 101.5 cv
315.583 100.948 316.031 100.5 316.583 100.5 cv
317.135 100.5 317.583 100.948 317.583 101.5 cv
f
322.583 96.0829 mo
322.583 96.6349 322.135 97.0829 321.583 97.0829 cv
321.031 97.0829 320.583 96.6349 320.583 96.0829 cv
320.583 95.5309 321.031 95.0829 321.583 95.0829 cv
322.135 95.0829 322.583 95.5309 322.583 96.0829 cv
f
327.5 90.6669 mo
327.5 91.2189 327.052 91.6669 326.5 91.6669 cv
325.948 91.6669 325.5 91.2189 325.5 90.6669 cv
325.5 90.1149 325.948 89.6669 326.5 89.6669 cv
327.052 89.6669 327.5 90.1149 327.5 90.6669 cv
f
332.417 85.2499 mo
332.417 85.8019 331.969 86.2499 331.417 86.2499 cv
330.865 86.2499 330.417 85.8019 330.417 85.2499 cv
330.417 84.6979 330.865 84.2499 331.417 84.2499 cv
331.969 84.2499 332.417 84.6979 332.417 85.2499 cv
f
337.417 79.7499 mo
337.417 80.3019 336.969 80.7499 336.417 80.7499 cv
335.865 80.7499 335.417 80.3019 335.417 79.7499 cv
335.417 79.1979 335.865 78.7499 336.417 78.7499 cv
336.969 78.7499 337.417 79.1979 337.417 79.7499 cv
f
342.333 74.1669 mo
342.333 74.7189 341.885 75.1669 341.333 75.1669 cv
340.781 75.1669 340.333 74.7189 340.333 74.1669 cv
340.333 73.6149 340.781 73.1669 341.333 73.1669 cv
341.885 73.1669 342.333 73.6149 342.333 74.1669 cv
f
347.333 68.6669 mo
347.333 69.2189 346.885 69.6669 346.333 69.6669 cv
345.781 69.6669 345.333 69.2189 345.333 68.6669 cv
345.333 68.1149 345.781 67.6669 346.333 67.6669 cv
346.885 67.6669 347.333 68.1149 347.333 68.6669 cv
f
352.25 62.9999 mo
352.25 63.5519 351.802 63.9999 351.25 63.9999 cv
350.698 63.9999 350.25 63.5519 350.25 62.9999 cv
350.25 62.4479 350.698 61.9999 351.25 61.9999 cv
351.802 61.9999 352.25 62.4479 352.25 62.9999 cv
f
357.167 57.4169 mo
357.167 57.9689 356.719 58.4169 356.167 58.4169 cv
355.615 58.4169 355.167 57.9689 355.167 57.4169 cv
355.167 56.8649 355.615 56.4169 356.167 56.4169 cv
356.719 56.4169 357.167 56.8649 357.167 57.4169 cv
f
362.167 51.7499 mo
362.167 52.3019 361.719 52.7499 361.167 52.7499 cv
360.615 52.7499 360.167 52.3019 360.167 51.7499 cv
360.167 51.1979 360.615 50.7499 361.167 50.7499 cv
361.719 50.7499 362.167 51.1979 362.167 51.7499 cv
f
367.083 45.9999 mo
367.083 46.5519 366.635 46.9999 366.083 46.9999 cv
365.531 46.9999 365.083 46.5519 365.083 45.9999 cv
365.083 45.4479 365.531 44.9999 366.083 44.9999 cv
366.635 44.9999 367.083 45.4479 367.083 45.9999 cv
f
372 40.3329 mo
372 40.8849 371.552 41.3329 371 41.3329 cv
370.448 41.3329 370 40.8849 370 40.3329 cv
370 39.7809 370.448 39.3329 371 39.3329 cv
371.552 39.3329 372 39.7809 372 40.3329 cv
f
377 34.7499 mo
377 35.3019 376.552 35.7499 376 35.7499 cv
375.448 35.7499 375 35.3019 375 34.7499 cv
375 34.1979 375.448 33.7499 376 33.7499 cv
376.552 33.7499 377 34.1979 377 34.7499 cv
f
381.917 29.3329 mo
381.917 29.8849 381.469 30.3329 380.917 30.3329 cv
380.365 30.3329 379.917 29.8849 379.917 29.3329 cv
379.917 28.7809 380.365 28.3329 380.917 28.3329 cv
381.469 28.3329 381.917 28.7809 381.917 29.3329 cv
f
386.917 24.4169 mo
386.917 24.9689 386.469 25.4169 385.917 25.4169 cv
385.365 25.4169 384.917 24.9689 384.917 24.4169 cv
384.917 23.8649 385.365 23.4169 385.917 23.4169 cv
386.469 23.4169 386.917 23.8649 386.917 24.4169 cv
f
243.417 165.667 mo
243.417 166.219 242.969 166.667 242.417 166.667 cv
241.865 166.667 241.417 166.219 241.417 165.667 cv
241.417 165.115 241.865 164.667 242.417 164.667 cv
242.969 164.667 243.417 165.115 243.417 165.667 cv
3.0518e-5 .990631 1 .000396735 cmyk
f
248.333 164.333 mo
248.333 164.885 247.885 165.333 247.333 165.333 cv
246.781 165.333 246.333 164.885 246.333 164.333 cv
246.333 163.781 246.781 163.333 247.333 163.333 cv
247.885 163.333 248.333 163.781 248.333 164.333 cv
f
253.333 162.75 mo
253.333 163.302 252.885 163.75 252.333 163.75 cv
251.781 163.75 251.333 163.302 251.333 162.75 cv
251.333 162.198 251.781 161.75 252.333 161.75 cv
252.885 161.75 253.333 162.198 253.333 162.75 cv
f
258.25 160.833 mo
258.25 161.385 257.802 161.833 257.25 161.833 cv
256.698 161.833 256.25 161.385 256.25 160.833 cv
256.25 160.281 256.698 159.833 257.25 159.833 cv
257.802 159.833 258.25 160.281 258.25 160.833 cv
f
263.167 158.417 mo
263.167 158.969 262.719 159.417 262.167 159.417 cv
261.615 159.417 261.167 158.969 261.167 158.417 cv
261.167 157.865 261.615 157.417 262.167 157.417 cv
262.719 157.417 263.167 157.865 263.167 158.417 cv
f
268.167 155.667 mo
268.167 156.219 267.719 156.667 267.167 156.667 cv
266.615 156.667 266.167 156.219 266.167 155.667 cv
266.167 155.115 266.615 154.667 267.167 154.667 cv
267.719 154.667 268.167 155.115 268.167 155.667 cv
f
273.083 152.667 mo
273.083 153.219 272.635 153.667 272.083 153.667 cv
271.531 153.667 271.083 153.219 271.083 152.667 cv
271.083 152.115 271.531 151.667 272.083 151.667 cv
272.635 151.667 273.083 152.115 273.083 152.667 cv
f
278 149.417 mo
278 149.969 277.552 150.417 277 150.417 cv
276.448 150.417 276 149.969 276 149.417 cv
276 148.865 276.448 148.417 277 148.417 cv
277.552 148.417 278 148.865 278 149.417 cv
f
283 145.833 mo
283 146.385 282.552 146.833 282 146.833 cv
281.448 146.833 281 146.385 281 145.833 cv
281 145.281 281.448 144.833 282 144.833 cv
282.552 144.833 283 145.281 283 145.833 cv
f
287.917 142 mo
287.917 142.552 287.469 143 286.917 143 cv
286.365 143 285.917 142.552 285.917 142 cv
285.917 141.448 286.365 141 286.917 141 cv
287.469 141 287.917 141.448 287.917 142 cv
f
292.917 138.083 mo
292.917 138.635 292.469 139.083 291.917 139.083 cv
291.365 139.083 290.917 138.635 290.917 138.083 cv
290.917 137.531 291.365 137.083 291.917 137.083 cv
292.469 137.083 292.917 137.531 292.917 138.083 cv
f
297.833 134 mo
297.833 134.552 297.385 135 296.833 135 cv
296.281 135 295.833 134.552 295.833 134 cv
295.833 133.448 296.281 133 296.833 133 cv
297.385 133 297.833 133.448 297.833 134 cv
f
302.75 129.833 mo
302.75 130.385 302.302 130.833 301.75 130.833 cv
301.198 130.833 300.75 130.385 300.75 129.833 cv
300.75 129.281 301.198 128.833 301.75 128.833 cv
302.302 128.833 302.75 129.281 302.75 129.833 cv
f
307.75 125.667 mo
307.75 126.219 307.302 126.667 306.75 126.667 cv
306.198 126.667 305.75 126.219 305.75 125.667 cv
305.75 125.115 306.198 124.667 306.75 124.667 cv
307.302 124.667 307.75 125.115 307.75 125.667 cv
f
312.667 121.333 mo
312.667 121.885 312.219 122.333 311.667 122.333 cv
311.115 122.333 310.667 121.885 310.667 121.333 cv
310.667 120.781 311.115 120.333 311.667 120.333 cv
312.219 120.333 312.667 120.781 312.667 121.333 cv
f
317.583 117 mo
317.583 117.552 317.135 118 316.583 118 cv
316.031 118 315.583 117.552 315.583 117 cv
315.583 116.448 316.031 116 316.583 116 cv
317.135 116 317.583 116.448 317.583 117 cv
f
322.583 112.667 mo
322.583 113.219 322.135 113.667 321.583 113.667 cv
321.031 113.667 320.583 113.219 320.583 112.667 cv
320.583 112.115 321.031 111.667 321.583 111.667 cv
322.135 111.667 322.583 112.115 322.583 112.667 cv
f
327.5 108.167 mo
327.5 108.719 327.052 109.167 326.5 109.167 cv
325.948 109.167 325.5 108.719 325.5 108.167 cv
325.5 107.615 325.948 107.167 326.5 107.167 cv
327.052 107.167 327.5 107.615 327.5 108.167 cv
f
332.417 103.75 mo
332.417 104.302 331.969 104.75 331.417 104.75 cv
330.865 104.75 330.417 104.302 330.417 103.75 cv
330.417 103.198 330.865 102.75 331.417 102.75 cv
331.969 102.75 332.417 103.198 332.417 103.75 cv
f
337.417 99.1669 mo
337.417 99.7189 336.969 100.167 336.417 100.167 cv
335.865 100.167 335.417 99.7189 335.417 99.1669 cv
335.417 98.6149 335.865 98.1669 336.417 98.1669 cv
336.969 98.1669 337.417 98.6149 337.417 99.1669 cv
f
342.333 94.6669 mo
342.333 95.2189 341.885 95.6669 341.333 95.6669 cv
340.781 95.6669 340.333 95.2189 340.333 94.6669 cv
340.333 94.1149 340.781 93.6669 341.333 93.6669 cv
341.885 93.6669 342.333 94.1149 342.333 94.6669 cv
f
347.333 89.9999 mo
347.333 90.5519 346.885 90.9999 346.333 90.9999 cv
345.781 90.9999 345.333 90.5519 345.333 89.9999 cv
345.333 89.4479 345.781 88.9999 346.333 88.9999 cv
346.885 88.9999 347.333 89.4479 347.333 89.9999 cv
f
352.25 85.4169 mo
352.25 85.9689 351.802 86.4169 351.25 86.4169 cv
350.698 86.4169 350.25 85.9689 350.25 85.4169 cv
350.25 84.8649 350.698 84.4169 351.25 84.4169 cv
351.802 84.4169 352.25 84.8649 352.25 85.4169 cv
f
357.167 80.7499 mo
357.167 81.3019 356.719 81.7499 356.167 81.7499 cv
355.615 81.7499 355.167 81.3019 355.167 80.7499 cv
355.167 80.1979 355.615 79.7499 356.167 79.7499 cv
356.719 79.7499 357.167 80.1979 357.167 80.7499 cv
f
362.167 76.0829 mo
362.167 76.6349 361.719 77.0829 361.167 77.0829 cv
360.615 77.0829 360.167 76.6349 360.167 76.0829 cv
360.167 75.5309 360.615 75.0829 361.167 75.0829 cv
361.719 75.0829 362.167 75.5309 362.167 76.0829 cv
f
367.083 71.3329 mo
367.083 71.8849 366.635 72.3329 366.083 72.3329 cv
365.531 72.3329 365.083 71.8849 365.083 71.3329 cv
365.083 70.7809 365.531 70.3329 366.083 70.3329 cv
366.635 70.3329 367.083 70.7809 367.083 71.3329 cv
f
372 66.5829 mo
372 67.1349 371.552 67.5829 371 67.5829 cv
370.448 67.5829 370 67.1349 370 66.5829 cv
370 66.0309 370.448 65.5829 371 65.5829 cv
371.552 65.5829 372 66.0309 372 66.5829 cv
f
377 61.7499 mo
377 62.3019 376.552 62.7499 376 62.7499 cv
375.448 62.7499 375 62.3019 375 61.7499 cv
375 61.1979 375.448 60.7499 376 60.7499 cv
376.552 60.7499 377 61.1979 377 61.7499 cv
f
381.917 56.9999 mo
381.917 57.5519 381.469 57.9999 380.917 57.9999 cv
380.365 57.9999 379.917 57.5519 379.917 56.9999 cv
379.917 56.4479 380.365 55.9999 380.917 55.9999 cv
381.469 55.9999 381.917 56.4479 381.917 56.9999 cv
f
386.917 52.1669 mo
386.917 52.7189 386.469 53.1669 385.917 53.1669 cv
385.365 53.1669 384.917 52.7189 384.917 52.1669 cv
384.917 51.6149 385.365 51.1669 385.917 51.1669 cv
386.469 51.1669 386.917 51.6149 386.917 52.1669 cv
f
243.417 166.167 mo
243.417 166.719 242.969 167.167 242.417 167.167 cv
241.865 167.167 241.417 166.719 241.417 166.167 cv
241.417 165.615 241.865 165.167 242.417 165.167 cv
242.969 165.167 243.417 165.615 243.417 166.167 cv
.520012 3.0518e-5 .126131 3.0518e-5 cmyk
f
248.333 165.333 mo
248.333 165.885 247.885 166.333 247.333 166.333 cv
246.781 166.333 246.333 165.885 246.333 165.333 cv
246.333 164.781 246.781 164.333 247.333 164.333 cv
247.885 164.333 248.333 164.781 248.333 165.333 cv
f
253.333 164.25 mo
253.333 164.802 252.885 165.25 252.333 165.25 cv
251.781 165.25 251.333 164.802 251.333 164.25 cv
251.333 163.698 251.781 163.25 252.333 163.25 cv
252.885 163.25 253.333 163.698 253.333 164.25 cv
f
258.25 162.917 mo
258.25 163.469 257.802 163.917 257.25 163.917 cv
256.698 163.917 256.25 163.469 256.25 162.917 cv
256.25 162.365 256.698 161.917 257.25 161.917 cv
257.802 161.917 258.25 162.365 258.25 162.917 cv
f
263.167 161.417 mo
263.167 161.969 262.719 162.417 262.167 162.417 cv
261.615 162.417 261.167 161.969 261.167 161.417 cv
261.167 160.865 261.615 160.417 262.167 160.417 cv
262.719 160.417 263.167 160.865 263.167 161.417 cv
f
268.167 159.667 mo
268.167 160.219 267.719 160.667 267.167 160.667 cv
266.615 160.667 266.167 160.219 266.167 159.667 cv
266.167 159.115 266.615 158.667 267.167 158.667 cv
267.719 158.667 268.167 159.115 268.167 159.667 cv
f
273.083 157.667 mo
273.083 158.219 272.635 158.667 272.083 158.667 cv
271.531 158.667 271.083 158.219 271.083 157.667 cv
271.083 157.115 271.531 156.667 272.083 156.667 cv
272.635 156.667 273.083 157.115 273.083 157.667 cv
f
278 155.5 mo
278 156.052 277.552 156.5 277 156.5 cv
276.448 156.5 276 156.052 276 155.5 cv
276 154.948 276.448 154.5 277 154.5 cv
277.552 154.5 278 154.948 278 155.5 cv
f
283 153.083 mo
283 153.635 282.552 154.083 282 154.083 cv
281.448 154.083 281 153.635 281 153.083 cv
281 152.531 281.448 152.083 282 152.083 cv
282.552 152.083 283 152.531 283 153.083 cv
f
287.917 150.583 mo
287.917 151.135 287.469 151.583 286.917 151.583 cv
286.365 151.583 285.917 151.135 285.917 150.583 cv
285.917 150.031 286.365 149.583 286.917 149.583 cv
287.469 149.583 287.917 150.031 287.917 150.583 cv
f
292.917 147.833 mo
292.917 148.385 292.469 148.833 291.917 148.833 cv
291.365 148.833 290.917 148.385 290.917 147.833 cv
290.917 147.281 291.365 146.833 291.917 146.833 cv
292.469 146.833 292.917 147.281 292.917 147.833 cv
f
297.833 145 mo
297.833 145.552 297.385 146 296.833 146 cv
296.281 146 295.833 145.552 295.833 145 cv
295.833 144.448 296.281 144 296.833 144 cv
297.385 144 297.833 144.448 297.833 145 cv
f
302.75 142 mo
302.75 142.552 302.302 143 301.75 143 cv
301.198 143 300.75 142.552 300.75 142 cv
300.75 141.448 301.198 141 301.75 141 cv
302.302 141 302.75 141.448 302.75 142 cv
f
307.75 138.833 mo
307.75 139.385 307.302 139.833 306.75 139.833 cv
306.198 139.833 305.75 139.385 305.75 138.833 cv
305.75 138.281 306.198 137.833 306.75 137.833 cv
307.302 137.833 307.75 138.281 307.75 138.833 cv
f
312.667 135.583 mo
312.667 136.135 312.219 136.583 311.667 136.583 cv
311.115 136.583 310.667 136.135 310.667 135.583 cv
310.667 135.031 311.115 134.583 311.667 134.583 cv
312.219 134.583 312.667 135.031 312.667 135.583 cv
f
317.583 132.333 mo
317.583 132.885 317.135 133.333 316.583 133.333 cv
316.031 133.333 315.583 132.885 315.583 132.333 cv
315.583 131.781 316.031 131.333 316.583 131.333 cv
317.135 131.333 317.583 131.781 317.583 132.333 cv
f
322.583 128.917 mo
322.583 129.469 322.135 129.917 321.583 129.917 cv
321.031 129.917 320.583 129.469 320.583 128.917 cv
320.583 128.365 321.031 127.917 321.583 127.917 cv
322.135 127.917 322.583 128.365 322.583 128.917 cv
f
327.5 125.5 mo
327.5 126.052 327.052 126.5 326.5 126.5 cv
325.948 126.5 325.5 126.052 325.5 125.5 cv
325.5 124.948 325.948 124.5 326.5 124.5 cv
327.052 124.5 327.5 124.948 327.5 125.5 cv
f
332.417 122.083 mo
332.417 122.635 331.969 123.083 331.417 123.083 cv
330.865 123.083 330.417 122.635 330.417 122.083 cv
330.417 121.531 330.865 121.083 331.417 121.083 cv
331.969 121.083 332.417 121.531 332.417 122.083 cv
f
337.417 118.5 mo
337.417 119.052 336.969 119.5 336.417 119.5 cv
335.865 119.5 335.417 119.052 335.417 118.5 cv
335.417 117.948 335.865 117.5 336.417 117.5 cv
336.969 117.5 337.417 117.948 337.417 118.5 cv
f
342.333 114.917 mo
342.333 115.469 341.885 115.917 341.333 115.917 cv
340.781 115.917 340.333 115.469 340.333 114.917 cv
340.333 114.365 340.781 113.917 341.333 113.917 cv
341.885 113.917 342.333 114.365 342.333 114.917 cv
f
347.333 111.333 mo
347.333 111.885 346.885 112.333 346.333 112.333 cv
345.781 112.333 345.333 111.885 345.333 111.333 cv
345.333 110.781 345.781 110.333 346.333 110.333 cv
346.885 110.333 347.333 110.781 347.333 111.333 cv
f
352.25 107.667 mo
352.25 108.219 351.802 108.667 351.25 108.667 cv
350.698 108.667 350.25 108.219 350.25 107.667 cv
350.25 107.115 350.698 106.667 351.25 106.667 cv
351.802 106.667 352.25 107.115 352.25 107.667 cv
f
357.167 104 mo
357.167 104.552 356.719 105 356.167 105 cv
355.615 105 355.167 104.552 355.167 104 cv
355.167 103.448 355.615 103 356.167 103 cv
356.719 103 357.167 103.448 357.167 104 cv
f
362.167 100.333 mo
362.167 100.885 361.719 101.333 361.167 101.333 cv
360.615 101.333 360.167 100.885 360.167 100.333 cv
360.167 99.7809 360.615 99.3329 361.167 99.3329 cv
361.719 99.3329 362.167 99.7809 362.167 100.333 cv
f
367.083 96.5829 mo
367.083 97.1349 366.635 97.5829 366.083 97.5829 cv
365.531 97.5829 365.083 97.1349 365.083 96.5829 cv
365.083 96.0309 365.531 95.5829 366.083 95.5829 cv
366.635 95.5829 367.083 96.0309 367.083 96.5829 cv
f
372 92.7499 mo
372 93.3019 371.552 93.7499 371 93.7499 cv
370.448 93.7499 370 93.3019 370 92.7499 cv
370 92.1979 370.448 91.7499 371 91.7499 cv
371.552 91.7499 372 92.1979 372 92.7499 cv
f
377 88.9999 mo
377 89.5519 376.552 89.9999 376 89.9999 cv
375.448 89.9999 375 89.5519 375 88.9999 cv
375 88.4479 375.448 87.9999 376 87.9999 cv
376.552 87.9999 377 88.4479 377 88.9999 cv
f
381.917 85.1669 mo
381.917 85.7189 381.469 86.1669 380.917 86.1669 cv
380.365 86.1669 379.917 85.7189 379.917 85.1669 cv
379.917 84.6149 380.365 84.1669 380.917 84.1669 cv
381.469 84.1669 381.917 84.6149 381.917 85.1669 cv
f
386.917 81.3329 mo
386.917 81.8849 386.469 82.3329 385.917 82.3329 cv
385.365 82.3329 384.917 81.8849 384.917 81.3329 cv
384.917 80.7809 385.365 80.3329 385.917 80.3329 cv
386.469 80.3329 386.917 80.7809 386.917 81.3329 cv
f
243.417 166.583 mo
243.417 167.135 242.969 167.583 242.417 167.583 cv
241.865 167.583 241.417 167.135 241.417 166.583 cv
241.417 166.031 241.865 165.583 242.417 165.583 cv
242.969 165.583 243.417 166.031 243.417 166.583 cv
.265019 .809232 3.0518e-5 3.0518e-5 cmyk
f
248.333 166.333 mo
248.333 166.885 247.885 167.333 247.333 167.333 cv
246.781 167.333 246.333 166.885 246.333 166.333 cv
246.333 165.781 246.781 165.333 247.333 165.333 cv
247.885 165.333 248.333 165.781 248.333 166.333 cv
f
253.333 165.75 mo
253.333 166.302 252.885 166.75 252.333 166.75 cv
251.781 166.75 251.333 166.302 251.333 165.75 cv
251.333 165.198 251.781 164.75 252.333 164.75 cv
252.885 164.75 253.333 165.198 253.333 165.75 cv
f
258.25 164.917 mo
258.25 165.469 257.802 165.917 257.25 165.917 cv
256.698 165.917 256.25 165.469 256.25 164.917 cv
256.25 164.365 256.698 163.917 257.25 163.917 cv
257.802 163.917 258.25 164.365 258.25 164.917 cv
f
263.167 164.083 mo
263.167 164.635 262.719 165.083 262.167 165.083 cv
261.615 165.083 261.167 164.635 261.167 164.083 cv
261.167 163.531 261.615 163.083 262.167 163.083 cv
262.719 163.083 263.167 163.531 263.167 164.083 cv
f
268.167 163 mo
268.167 163.552 267.719 164 267.167 164 cv
266.615 164 266.167 163.552 266.167 163 cv
266.167 162.448 266.615 162 267.167 162 cv
267.719 162 268.167 162.448 268.167 163 cv
f
273.083 161.833 mo
273.083 162.385 272.635 162.833 272.083 162.833 cv
271.531 162.833 271.083 162.385 271.083 161.833 cv
271.083 161.281 271.531 160.833 272.083 160.833 cv
272.635 160.833 273.083 161.281 273.083 161.833 cv
f
278 160.5 mo
278 161.052 277.552 161.5 277 161.5 cv
276.448 161.5 276 161.052 276 160.5 cv
276 159.948 276.448 159.5 277 159.5 cv
277.552 159.5 278 159.948 278 160.5 cv
f
283 159.083 mo
283 159.635 282.552 160.083 282 160.083 cv
281.448 160.083 281 159.635 281 159.083 cv
281 158.531 281.448 158.083 282 158.083 cv
282.552 158.083 283 158.531 283 159.083 cv
f
287.917 157.5 mo
287.917 158.052 287.469 158.5 286.917 158.5 cv
286.365 158.5 285.917 158.052 285.917 157.5 cv
285.917 156.948 286.365 156.5 286.917 156.5 cv
287.469 156.5 287.917 156.948 287.917 157.5 cv
f
292.917 155.833 mo
292.917 156.385 292.469 156.833 291.917 156.833 cv
291.365 156.833 290.917 156.385 290.917 155.833 cv
290.917 155.281 291.365 154.833 291.917 154.833 cv
292.469 154.833 292.917 155.281 292.917 155.833 cv
f
297.833 154.083 mo
297.833 154.635 297.385 155.083 296.833 155.083 cv
296.281 155.083 295.833 154.635 295.833 154.083 cv
295.833 153.531 296.281 153.083 296.833 153.083 cv
297.385 153.083 297.833 153.531 297.833 154.083 cv
f
302.75 152.25 mo
302.75 152.802 302.302 153.25 301.75 153.25 cv
301.198 153.25 300.75 152.802 300.75 152.25 cv
300.75 151.698 301.198 151.25 301.75 151.25 cv
302.302 151.25 302.75 151.698 302.75 152.25 cv
f
307.75 150.333 mo
307.75 150.885 307.302 151.333 306.75 151.333 cv
306.198 151.333 305.75 150.885 305.75 150.333 cv
305.75 149.781 306.198 149.333 306.75 149.333 cv
307.302 149.333 307.75 149.781 307.75 150.333 cv
f
312.667 148.25 mo
312.667 148.802 312.219 149.25 311.667 149.25 cv
311.115 149.25 310.667 148.802 310.667 148.25 cv
310.667 147.698 311.115 147.25 311.667 147.25 cv
312.219 147.25 312.667 147.698 312.667 148.25 cv
f
317.583 146.167 mo
317.583 146.719 317.135 147.167 316.583 147.167 cv
316.031 147.167 315.583 146.719 315.583 146.167 cv
315.583 145.615 316.031 145.167 316.583 145.167 cv
317.135 145.167 317.583 145.615 317.583 146.167 cv
f
322.583 143.917 mo
322.583 144.469 322.135 144.917 321.583 144.917 cv
321.031 144.917 320.583 144.469 320.583 143.917 cv
320.583 143.365 321.031 142.917 321.583 142.917 cv
322.135 142.917 322.583 143.365 322.583 143.917 cv
f
327.5 141.667 mo
327.5 142.219 327.052 142.667 326.5 142.667 cv
325.948 142.667 325.5 142.219 325.5 141.667 cv
325.5 141.115 325.948 140.667 326.5 140.667 cv
327.052 140.667 327.5 141.115 327.5 141.667 cv
f
332.417 139.25 mo
332.417 139.802 331.969 140.25 331.417 140.25 cv
330.865 140.25 330.417 139.802 330.417 139.25 cv
330.417 138.698 330.865 138.25 331.417 138.25 cv
331.969 138.25 332.417 138.698 332.417 139.25 cv
f
337.417 136.833 mo
337.417 137.385 336.969 137.833 336.417 137.833 cv
335.865 137.833 335.417 137.385 335.417 136.833 cv
335.417 136.281 335.865 135.833 336.417 135.833 cv
336.969 135.833 337.417 136.281 337.417 136.833 cv
f
342.333 134.333 mo
342.333 134.885 341.885 135.333 341.333 135.333 cv
340.781 135.333 340.333 134.885 340.333 134.333 cv
340.333 133.781 340.781 133.333 341.333 133.333 cv
341.885 133.333 342.333 133.781 342.333 134.333 cv
f
347.333 131.833 mo
347.333 132.385 346.885 132.833 346.333 132.833 cv
345.781 132.833 345.333 132.385 345.333 131.833 cv
345.333 131.281 345.781 130.833 346.333 130.833 cv
346.885 130.833 347.333 131.281 347.333 131.833 cv
f
352.25 129.25 mo
352.25 129.802 351.802 130.25 351.25 130.25 cv
350.698 130.25 350.25 129.802 350.25 129.25 cv
350.25 128.698 350.698 128.25 351.25 128.25 cv
351.802 128.25 352.25 128.698 352.25 129.25 cv
f
357.167 126.583 mo
357.167 127.135 356.719 127.583 356.167 127.583 cv
355.615 127.583 355.167 127.135 355.167 126.583 cv
355.167 126.031 355.615 125.583 356.167 125.583 cv
356.719 125.583 357.167 126.031 357.167 126.583 cv
f
362.167 123.917 mo
362.167 124.469 361.719 124.917 361.167 124.917 cv
360.615 124.917 360.167 124.469 360.167 123.917 cv
360.167 123.365 360.615 122.917 361.167 122.917 cv
361.719 122.917 362.167 123.365 362.167 123.917 cv
f
367.083 121.25 mo
367.083 121.802 366.635 122.25 366.083 122.25 cv
365.531 122.25 365.083 121.802 365.083 121.25 cv
365.083 120.698 365.531 120.25 366.083 120.25 cv
366.635 120.25 367.083 120.698 367.083 121.25 cv
f
372 118.5 mo
372 119.052 371.552 119.5 371 119.5 cv
370.448 119.5 370 119.052 370 118.5 cv
370 117.948 370.448 117.5 371 117.5 cv
371.552 117.5 372 117.948 372 118.5 cv
f
377 115.667 mo
377 116.219 376.552 116.667 376 116.667 cv
375.448 116.667 375 116.219 375 115.667 cv
375 115.115 375.448 114.667 376 114.667 cv
376.552 114.667 377 115.115 377 115.667 cv
f
381.917 112.833 mo
381.917 113.385 381.469 113.833 380.917 113.833 cv
380.365 113.833 379.917 113.385 379.917 112.833 cv
379.917 112.281 380.365 111.833 380.917 111.833 cv
381.469 111.833 381.917 112.281 381.917 112.833 cv
f
386.917 110 mo
386.917 110.552 386.469 111 385.917 111 cv
385.365 111 384.917 110.552 384.917 110 cv
384.917 109.448 385.365 109 385.917 109 cv
386.469 109 386.917 109.448 386.917 110 cv
f
243.417 167.083 mo
243.417 167.635 242.969 168.083 242.417 168.083 cv
241.865 168.083 241.417 167.635 241.417 167.083 cv
241.417 166.531 241.865 166.083 242.417 166.083 cv
242.969 166.083 243.417 166.531 243.417 167.083 cv
.0639048 3.0518e-5 .996094 3.0518e-5 cmyk
f
248.333 167.25 mo
248.333 167.802 247.885 168.25 247.333 168.25 cv
246.781 168.25 246.333 167.802 246.333 167.25 cv
246.333 166.698 246.781 166.25 247.333 166.25 cv
247.885 166.25 248.333 166.698 248.333 167.25 cv
f
253.333 167.167 mo
253.333 167.719 252.885 168.167 252.333 168.167 cv
251.781 168.167 251.333 167.719 251.333 167.167 cv
251.333 166.615 251.781 166.167 252.333 166.167 cv
252.885 166.167 253.333 166.615 253.333 167.167 cv
f
258.25 166.917 mo
258.25 167.469 257.802 167.917 257.25 167.917 cv
256.698 167.917 256.25 167.469 256.25 166.917 cv
256.25 166.365 256.698 165.917 257.25 165.917 cv
257.802 165.917 258.25 166.365 258.25 166.917 cv
f
263.167 166.5 mo
263.167 167.052 262.719 167.5 262.167 167.5 cv
261.615 167.5 261.167 167.052 261.167 166.5 cv
261.167 165.948 261.615 165.5 262.167 165.5 cv
262.719 165.5 263.167 165.948 263.167 166.5 cv
f
268.167 166.083 mo
268.167 166.635 267.719 167.083 267.167 167.083 cv
266.615 167.083 266.167 166.635 266.167 166.083 cv
266.167 165.531 266.615 165.083 267.167 165.083 cv
267.719 165.083 268.167 165.531 268.167 166.083 cv
f
273.083 165.5 mo
273.083 166.052 272.635 166.5 272.083 166.5 cv
271.531 166.5 271.083 166.052 271.083 165.5 cv
271.083 164.948 271.531 164.5 272.083 164.5 cv
272.635 164.5 273.083 164.948 273.083 165.5 cv
f
278 164.833 mo
278 165.385 277.552 165.833 277 165.833 cv
276.448 165.833 276 165.385 276 164.833 cv
276 164.281 276.448 163.833 277 163.833 cv
277.552 163.833 278 164.281 278 164.833 cv
f
283 164.083 mo
283 164.635 282.552 165.083 282 165.083 cv
281.448 165.083 281 164.635 281 164.083 cv
281 163.531 281.448 163.083 282 163.083 cv
282.552 163.083 283 163.531 283 164.083 cv
f
287.917 163.25 mo
287.917 163.802 287.469 164.25 286.917 164.25 cv
286.365 164.25 285.917 163.802 285.917 163.25 cv
285.917 162.698 286.365 162.25 286.917 162.25 cv
287.469 162.25 287.917 162.698 287.917 163.25 cv
f
292.917 162.417 mo
292.917 162.969 292.469 163.417 291.917 163.417 cv
291.365 163.417 290.917 162.969 290.917 162.417 cv
290.917 161.865 291.365 161.417 291.917 161.417 cv
292.469 161.417 292.917 161.865 292.917 162.417 cv
f
297.833 161.5 mo
297.833 162.052 297.385 162.5 296.833 162.5 cv
296.281 162.5 295.833 162.052 295.833 161.5 cv
295.833 160.948 296.281 160.5 296.833 160.5 cv
297.385 160.5 297.833 160.948 297.833 161.5 cv
f
302.75 160.5 mo
302.75 161.052 302.302 161.5 301.75 161.5 cv
301.198 161.5 300.75 161.052 300.75 160.5 cv
300.75 159.948 301.198 159.5 301.75 159.5 cv
302.302 159.5 302.75 159.948 302.75 160.5 cv
f
307.75 159.417 mo
307.75 159.969 307.302 160.417 306.75 160.417 cv
306.198 160.417 305.75 159.969 305.75 159.417 cv
305.75 158.865 306.198 158.417 306.75 158.417 cv
307.302 158.417 307.75 158.865 307.75 159.417 cv
f
312.667 158.333 mo
312.667 158.885 312.219 159.333 311.667 159.333 cv
311.115 159.333 310.667 158.885 310.667 158.333 cv
310.667 157.781 311.115 157.333 311.667 157.333 cv
312.219 157.333 312.667 157.781 312.667 158.333 cv
f
317.583 157.167 mo
317.583 157.719 317.135 158.167 316.583 158.167 cv
316.031 158.167 315.583 157.719 315.583 157.167 cv
315.583 156.615 316.031 156.167 316.583 156.167 cv
317.135 156.167 317.583 156.615 317.583 157.167 cv
f
322.583 156 mo
322.583 156.552 322.135 157 321.583 157 cv
321.031 157 320.583 156.552 320.583 156 cv
320.583 155.448 321.031 155 321.583 155 cv
322.135 155 322.583 155.448 322.583 156 cv
f
327.5 154.75 mo
327.5 155.302 327.052 155.75 326.5 155.75 cv
325.948 155.75 325.5 155.302 325.5 154.75 cv
325.5 154.198 325.948 153.75 326.5 153.75 cv
327.052 153.75 327.5 154.198 327.5 154.75 cv
f
332.417 153.417 mo
332.417 153.969 331.969 154.417 331.417 154.417 cv
330.865 154.417 330.417 153.969 330.417 153.417 cv
330.417 152.865 330.865 152.417 331.417 152.417 cv
331.969 152.417 332.417 152.865 332.417 153.417 cv
f
337.417 152.083 mo
337.417 152.635 336.969 153.083 336.417 153.083 cv
335.865 153.083 335.417 152.635 335.417 152.083 cv
335.417 151.531 335.865 151.083 336.417 151.083 cv
336.969 151.083 337.417 151.531 337.417 152.083 cv
f
342.333 150.667 mo
342.333 151.219 341.885 151.667 341.333 151.667 cv
340.781 151.667 340.333 151.219 340.333 150.667 cv
340.333 150.115 340.781 149.667 341.333 149.667 cv
341.885 149.667 342.333 150.115 342.333 150.667 cv
f
347.333 149.167 mo
347.333 149.719 346.885 150.167 346.333 150.167 cv
345.781 150.167 345.333 149.719 345.333 149.167 cv
345.333 148.615 345.781 148.167 346.333 148.167 cv
346.885 148.167 347.333 148.615 347.333 149.167 cv
f
352.25 147.667 mo
352.25 148.219 351.802 148.667 351.25 148.667 cv
350.698 148.667 350.25 148.219 350.25 147.667 cv
350.25 147.115 350.698 146.667 351.25 146.667 cv
351.802 146.667 352.25 147.115 352.25 147.667 cv
f
357.167 146.167 mo
357.167 146.719 356.719 147.167 356.167 147.167 cv
355.615 147.167 355.167 146.719 355.167 146.167 cv
355.167 145.615 355.615 145.167 356.167 145.167 cv
356.719 145.167 357.167 145.615 357.167 146.167 cv
f
362.167 144.583 mo
362.167 145.135 361.719 145.583 361.167 145.583 cv
360.615 145.583 360.167 145.135 360.167 144.583 cv
360.167 144.031 360.615 143.583 361.167 143.583 cv
361.719 143.583 362.167 144.031 362.167 144.583 cv
f
367.083 142.917 mo
367.083 143.469 366.635 143.917 366.083 143.917 cv
365.531 143.917 365.083 143.469 365.083 142.917 cv
365.083 142.365 365.531 141.917 366.083 141.917 cv
366.635 141.917 367.083 142.365 367.083 142.917 cv
f
372 141.25 mo
372 141.802 371.552 142.25 371 142.25 cv
370.448 142.25 370 141.802 370 141.25 cv
370 140.698 370.448 140.25 371 140.25 cv
371.552 140.25 372 140.698 372 141.25 cv
f
377 139.583 mo
377 140.135 376.552 140.583 376 140.583 cv
375.448 140.583 375 140.135 375 139.583 cv
375 139.031 375.448 138.583 376 138.583 cv
376.552 138.583 377 139.031 377 139.583 cv
f
381.917 137.833 mo
381.917 138.385 381.469 138.833 380.917 138.833 cv
380.365 138.833 379.917 138.385 379.917 137.833 cv
379.917 137.281 380.365 136.833 380.917 136.833 cv
381.469 136.833 381.917 137.281 381.917 137.833 cv
f
386.917 136.083 mo
386.917 136.635 386.469 137.083 385.917 137.083 cv
385.365 137.083 384.917 136.635 384.917 136.083 cv
384.917 135.531 385.365 135.083 385.917 135.083 cv
386.469 135.083 386.917 135.531 386.917 136.083 cv
f
243.417 167.583 mo
243.417 168.135 242.969 168.583 242.417 168.583 cv
241.865 168.583 241.417 168.135 241.417 167.583 cv
241.417 167.031 241.865 166.583 242.417 166.583 cv
242.969 166.583 243.417 167.031 243.417 167.583 cv
1 /0 /CSD get_res sepcs
1 sep
f
248.333 168.25 mo
248.333 168.802 247.885 169.25 247.333 169.25 cv
246.781 169.25 246.333 168.802 246.333 168.25 cv
246.333 167.698 246.781 167.25 247.333 167.25 cv
247.885 167.25 248.333 167.698 248.333 168.25 cv
f
253.333 168.667 mo
253.333 169.219 252.885 169.667 252.333 169.667 cv
251.781 169.667 251.333 169.219 251.333 168.667 cv
251.333 168.115 251.781 167.667 252.333 167.667 cv
252.885 167.667 253.333 168.115 253.333 168.667 cv
f
258.25 168.917 mo
258.25 169.469 257.802 169.917 257.25 169.917 cv
256.698 169.917 256.25 169.469 256.25 168.917 cv
256.25 168.365 256.698 167.917 257.25 167.917 cv
257.802 167.917 258.25 168.365 258.25 168.917 cv
f
263.167 169 mo
263.167 169.552 262.719 170 262.167 170 cv
261.615 170 261.167 169.552 261.167 169 cv
261.167 168.448 261.615 168 262.167 168 cv
262.719 168 263.167 168.448 263.167 169 cv
f
268.167 169.083 mo
268.167 169.635 267.719 170.083 267.167 170.083 cv
266.615 170.083 266.167 169.635 266.167 169.083 cv
266.167 168.531 266.615 168.083 267.167 168.083 cv
267.719 168.083 268.167 168.531 268.167 169.083 cv
f
273.083 169 mo
273.083 169.552 272.635 170 272.083 170 cv
271.531 170 271.083 169.552 271.083 169 cv
271.083 168.448 271.531 168 272.083 168 cv
272.635 168 273.083 168.448 273.083 169 cv
f
278 168.917 mo
278 169.469 277.552 169.917 277 169.917 cv
276.448 169.917 276 169.469 276 168.917 cv
276 168.365 276.448 167.917 277 167.917 cv
277.552 167.917 278 168.365 278 168.917 cv
f
283 168.75 mo
283 169.302 282.552 169.75 282 169.75 cv
281.448 169.75 281 169.302 281 168.75 cv
281 168.198 281.448 167.75 282 167.75 cv
282.552 167.75 283 168.198 283 168.75 cv
f
287.917 168.5 mo
287.917 169.052 287.469 169.5 286.917 169.5 cv
286.365 169.5 285.917 169.052 285.917 168.5 cv
285.917 167.948 286.365 167.5 286.917 167.5 cv
287.469 167.5 287.917 167.948 287.917 168.5 cv
f
292.917 168.25 mo
292.917 168.802 292.469 169.25 291.917 169.25 cv
291.365 169.25 290.917 168.802 290.917 168.25 cv
290.917 167.698 291.365 167.25 291.917 167.25 cv
292.469 167.25 292.917 167.698 292.917 168.25 cv
f
297.833 168 mo
297.833 168.552 297.385 169 296.833 169 cv
296.281 169 295.833 168.552 295.833 168 cv
295.833 167.448 296.281 167 296.833 167 cv
297.385 167 297.833 167.448 297.833 168 cv
f
302.75 167.667 mo
302.75 168.219 302.302 168.667 301.75 168.667 cv
301.198 168.667 300.75 168.219 300.75 167.667 cv
300.75 167.115 301.198 166.667 301.75 166.667 cv
302.302 166.667 302.75 167.115 302.75 167.667 cv
f
307.75 167.25 mo
307.75 167.802 307.302 168.25 306.75 168.25 cv
306.198 168.25 305.75 167.802 305.75 167.25 cv
305.75 166.698 306.198 166.25 306.75 166.25 cv
307.302 166.25 307.75 166.698 307.75 167.25 cv
f
312.667 166.833 mo
312.667 167.385 312.219 167.833 311.667 167.833 cv
311.115 167.833 310.667 167.385 310.667 166.833 cv
310.667 166.281 311.115 165.833 311.667 165.833 cv
312.219 165.833 312.667 166.281 312.667 166.833 cv
f
317.583 166.333 mo
317.583 166.885 317.135 167.333 316.583 167.333 cv
316.031 167.333 315.583 166.885 315.583 166.333 cv
315.583 165.781 316.031 165.333 316.583 165.333 cv
317.135 165.333 317.583 165.781 317.583 166.333 cv
f
322.583 165.833 mo
322.583 166.385 322.135 166.833 321.583 166.833 cv
321.031 166.833 320.583 166.385 320.583 165.833 cv
320.583 165.281 321.031 164.833 321.583 164.833 cv
322.135 164.833 322.583 165.281 322.583 165.833 cv
f
327.5 165.333 mo
327.5 165.885 327.052 166.333 326.5 166.333 cv
325.948 166.333 325.5 165.885 325.5 165.333 cv
325.5 164.781 325.948 164.333 326.5 164.333 cv
327.052 164.333 327.5 164.781 327.5 165.333 cv
f
332.417 164.833 mo
332.417 165.385 331.969 165.833 331.417 165.833 cv
330.865 165.833 330.417 165.385 330.417 164.833 cv
330.417 164.281 330.865 163.833 331.417 163.833 cv
331.969 163.833 332.417 164.281 332.417 164.833 cv
f
337.417 164.25 mo
337.417 164.802 336.969 165.25 336.417 165.25 cv
335.865 165.25 335.417 164.802 335.417 164.25 cv
335.417 163.698 335.865 163.25 336.417 163.25 cv
336.969 163.25 337.417 163.698 337.417 164.25 cv
f
342.333 163.583 mo
342.333 164.135 341.885 164.583 341.333 164.583 cv
340.781 164.583 340.333 164.135 340.333 163.583 cv
340.333 163.031 340.781 162.583 341.333 162.583 cv
341.885 162.583 342.333 163.031 342.333 163.583 cv
f
347.333 162.917 mo
347.333 163.469 346.885 163.917 346.333 163.917 cv
345.781 163.917 345.333 163.469 345.333 162.917 cv
345.333 162.365 345.781 161.917 346.333 161.917 cv
346.885 161.917 347.333 162.365 347.333 162.917 cv
f
352.25 162.25 mo
352.25 162.802 351.802 163.25 351.25 163.25 cv
350.698 163.25 350.25 162.802 350.25 162.25 cv
350.25 161.698 350.698 161.25 351.25 161.25 cv
351.802 161.25 352.25 161.698 352.25 162.25 cv
f
357.167 161.583 mo
357.167 162.135 356.719 162.583 356.167 162.583 cv
355.615 162.583 355.167 162.135 355.167 161.583 cv
355.167 161.031 355.615 160.583 356.167 160.583 cv
356.719 160.583 357.167 161.031 357.167 161.583 cv
f
362.167 160.833 mo
362.167 161.385 361.719 161.833 361.167 161.833 cv
360.615 161.833 360.167 161.385 360.167 160.833 cv
360.167 160.281 360.615 159.833 361.167 159.833 cv
361.719 159.833 362.167 160.281 362.167 160.833 cv
f
367.083 160.083 mo
367.083 160.635 366.635 161.083 366.083 161.083 cv
365.531 161.083 365.083 160.635 365.083 160.083 cv
365.083 159.531 365.531 159.083 366.083 159.083 cv
366.635 159.083 367.083 159.531 367.083 160.083 cv
f
372 159.333 mo
372 159.885 371.552 160.333 371 160.333 cv
370.448 160.333 370 159.885 370 159.333 cv
370 158.781 370.448 158.333 371 158.333 cv
371.552 158.333 372 158.781 372 159.333 cv
f
377 158.5 mo
377 159.052 376.552 159.5 376 159.5 cv
375.448 159.5 375 159.052 375 158.5 cv
375 157.948 375.448 157.5 376 157.5 cv
376.552 157.5 377 157.948 377 158.5 cv
f
381.917 157.667 mo
381.917 158.219 381.469 158.667 380.917 158.667 cv
380.365 158.667 379.917 158.219 379.917 157.667 cv
379.917 157.115 380.365 156.667 380.917 156.667 cv
381.469 156.667 381.917 157.115 381.917 157.667 cv
f
386.917 156.833 mo
386.917 157.385 386.469 157.833 385.917 157.833 cv
385.365 157.833 384.917 157.385 384.917 156.833 cv
384.917 156.281 385.365 155.833 385.917 155.833 cv
386.469 155.833 386.917 156.281 386.917 156.833 cv
f
grestore
gsave
237.5 9.91699 mo
237.5 194 li
386 194 li
386 9.91699 li
cp
clp
[6 6 ] 0 dsh
242.417 173.5 mo
247.333 174 li
252.333 174.417 li
257.25 174.833 li
262.167 175.25 li
267.167 175.667 li
272.083 176 li
277 176.333 li
282 176.75 li
286.917 177.083 li
291.917 177.333 li
296.833 177.667 li
301.75 178 li
306.75 178.333 li
311.667 178.583 li
316.583 178.917 li
321.583 179.167 li
326.5 179.5 li
331.417 179.75 li
336.417 180.083 li
341.333 180.333 li
346.333 180.667 li
351.25 180.917 li
356.167 181.25 li
361.167 181.5 li
366.083 181.833 li
371 182.083 li
376 182.417 li
380.917 182.667 li
385.917 183 li
3.0518e-5 .990631 1 .000396735 cmyk
@
grestore
gsave
0 779 mo
0 -57 li
593.7 -57 li
593.7 779 li
cp
clp
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
274.75 217.917 mo
(Temperature  [K])
[6.10992 5.56 8.32993 5.56 5.56 3.32993 5.56 2.78 5.56 3.32993 5.56 2.78 
2.78 2.78 6.66992 0 ]xsh
240.417 31.6669 mo
312.917 31.6669 li
312.917 15.0834 li
240.417 15.0834 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
0 lj
240.417 31.6669 mo
312.917 31.6669 li
312.917 15.0834 li
240.417 15.0834 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%%IncludeResource: font Helvetica
/WLYIZO+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /three /four /five /six /seven /.notdef /nine 
9{/.notdef}rp /C /.notdef /E /F /G /.notdef /I 
/.notdef /K 7{/.notdef}rp /S /T /.notdef /V 4{/.notdef}rp 
/bracketleft /.notdef /bracketright 3{/.notdef}rp /a 3{/.notdef}rp /e 3{/.notdef}rp 
/i 3{/.notdef}rp /m /n /.notdef /p /.notdef /r 
/.notdef /t /u 138{/.notdef}rp]
WLYIZO+Helvetica nf
WLYIZO+Helvetica*1 [11 0 0 -11 0 0 ]msf
242.417 27.2499 mo
(CuIn)
[7.94183 6.11601 3.05798 0 ]xsh
WLYIZO+Helvetica*1 [6 0 0 -6 0 0 ]msf
265.583 27.2499 mo
(0.5)
[3.336 1.668 0 ]xsh
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
273.917 27.2499 mo
(Ga)
[7.78 0 ]xsh
WLYIZO+Helvetica*1 [6 0 0 -6 0 0 ]msf
287.25 27.2499 mo
(0.5)
[3.336 1.668 0 ]xsh
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
295.583 27.2499 mo
(Se)
[6.66992 0 ]xsh
WLYIZO+Helvetica*1 [6 0 0 -6 0 0 ]msf
307.75 27.2499 mo
(2)sh
360.167 166.083 mo
375.333 166.083 li
375.333 153 li
360.167 153 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
WLYIZO+Helvetica*1 [7 0 0 -7 0 0 ]msf
361.167 163.583 mo
(10)
[3.892 0 ]xsh
WLYIZO+Helvetica*1 [5 0 0 -5 0 0 ]msf
368.917 158.583 mo
(19)
[2.75 0 ]xsh
360.167 124.417 mo
375.333 124.417 li
375.333 111.333 li
360.167 111.333 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
WLYIZO+Helvetica*1 [7 0 0 -7 0 0 ]msf
361.167 121.917 mo
(10)
[3.892 0 ]xsh
WLYIZO+Helvetica*1 [5 0 0 -5 0 0 ]msf
368.917 116.917 mo
(17)
[2.75 0 ]xsh
323 109.667 mo
338.167 109.667 li
338.167 96.5834 li
323 96.5834 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
WLYIZO+Helvetica*1 [7 0 0 -7 0 0 ]msf
324 107.167 mo
(10)
[3.892 0 ]xsh
WLYIZO+Helvetica*1 [5 0 0 -5 0 0 ]msf
331.75 102.167 mo
(15)
[2.75 0 ]xsh
306.75 76.8329 mo
319.917 76.8329 li
319.917 65.7498 li
306.75 65.7498 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
WLYIZO+Helvetica*1 [7 0 0 -7 0 0 ]msf
306.75 75.3329 mo
(10)
[3.892 0 ]xsh
WLYIZO+Helvetica*1 [5 0 0 -5 0 0 ]msf
314.5 70.3329 mo
(13)
[2.75 0 ]xsh
427.417 193.917 mo
575.833 193.917 li
575.833 9.91693 li
427.417 9.91693 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 lj
427.417 193.917 mo
427.417 9.91693 li
575.833 9.91693 li
575.833 193.917 li
427.417 193.917 li
@
427.417 9.91693 mo
575.833 9.91693 li
1 /0 /CSD get_res sepcs
1 sep
@
427.417 193.917 mo
575.833 193.917 li
@
575.833 193.917 mo
575.833 9.91693 li
@
427.417 193.917 mo
427.417 9.91693 li
@
427.417 193.917 mo
575.833 193.917 li
@
427.417 193.917 mo
427.417 9.91693 li
@
427.417 193.917 mo
427.417 188.75 li
@
427.417 9.91693 mo
427.417 14.9999 li
@
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
424.667 206 mo
(0)sh
476.833 193.917 mo
476.833 188.75 li
@
476.833 9.91693 mo
476.833 14.9999 li
@
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
468.5 206 mo
(200)
[5.56 5.56 0 ]xsh
526.333 193.917 mo
526.333 188.75 li
@
526.333 9.91693 mo
526.333 14.9999 li
@
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
518 206 mo
(400)
[5.56 5.56 0 ]xsh
575.833 193.917 mo
575.833 188.75 li
@
575.833 9.91693 mo
575.833 14.9999 li
@
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
567.5 206 mo
(600)
[5.56 5.56 0 ]xsh
427.417 193.917 mo
432.5 193.917 li
@
575.833 193.917 mo
570.667 193.917 li
@
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
407.333 197.583 mo
(-0.9)
[3.32993 5.56 2.78 0 ]xsh
427.417 132.583 mo
432.5 132.583 li
@
575.833 132.583 mo
570.667 132.583 li
@
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
407.333 136.25 mo
(-0.6)
[3.32993 5.56 2.78 0 ]xsh
427.417 71.1669 mo
432.5 71.1669 li
@
575.833 71.1669 mo
570.667 71.1669 li
@
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
407.333 74.8329 mo
(-0.3)
[3.32993 5.56 2.78 0 ]xsh
427.417 9.91693 mo
432.5 9.91693 li
@
575.833 9.91693 mo
570.667 9.91693 li
@
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
419 13.5829 mo
(0)sh
427.417 9.91693 mo
575.833 9.91693 li
@
427.417 193.917 mo
575.833 193.917 li
@
575.833 193.917 mo
575.833 9.91693 li
@
427.417 193.917 mo
427.417 9.91693 li
@
grestore
gsave
427.417 9.91699 mo
427.417 194 li
575.917 194 li
575.917 9.91699 li
cp
clp
432.333 173.083 mo
437.25 171.083 li
442.25 168.667 li
447.167 165 li
452.083 160.833 li
457.083 156.583 li
462 151.833 li
466.917 146.833 li
471.917 141.667 li
476.833 136.417 li
481.833 131.083 li
486.75 125.667 li
491.667 120.167 li
496.667 114.583 li
501.583 108.917 li
506.5 103.25 li
511.5 97.4999 li
516.417 91.7499 li
521.333 85.9169 li
526.333 79.9999 li
531.25 74.0829 li
536.25 68.0829 li
541.167 62.0829 li
546.083 56.0829 li
551.083 49.9999 li
556 43.9169 li
560.917 37.7499 li
565.917 31.7499 li
570.833 25.8329 li
575.833 20.6669 li
.895628 .7673 3.0518e-5 3.0518e-5 cmyk
@
432.333 173.5 mo
437.25 171.917 li
442.25 170 li
447.167 167.583 li
452.083 164.25 li
457.083 160.75 li
462 157.167 li
466.917 153.167 li
471.917 148.917 li
476.833 144.5 li
481.833 140 li
486.75 135.333 li
491.667 130.667 li
496.667 125.917 li
501.583 121.083 li
506.5 116.25 li
511.5 111.333 li
516.417 106.333 li
521.333 101.25 li
526.333 96.2499 li
531.25 91.0829 li
536.25 85.9169 li
541.167 80.7499 li
546.083 75.4999 li
551.083 70.2499 li
556 64.9999 li
560.917 59.6669 li
565.917 54.3329 li
570.833 48.9169 li
575.833 43.4999 li
.627314 3.0518e-5 1 3.0518e-5 cmyk
@
432.333 173.833 mo
437.25 172.75 li
442.25 171.333 li
447.167 169.583 li
452.083 167.417 li
457.083 164.75 li
462 161.917 li
466.917 158.917 li
471.917 155.75 li
476.833 152.333 li
481.833 148.75 li
486.75 145 li
491.667 141.167 li
496.667 137.25 li
501.583 133.25 li
506.5 129.167 li
511.5 125.083 li
516.417 120.917 li
521.333 116.667 li
526.333 112.417 li
531.25 108.167 li
536.25 103.833 li
541.167 99.4169 li
546.083 94.9999 li
551.083 90.5829 li
556 86.0829 li
560.917 81.5829 li
565.917 76.9999 li
570.833 72.4169 li
575.833 67.8329 li
3.0518e-5 .990631 1 .000396735 cmyk
@
432.333 174.25 mo
437.25 173.5 li
442.25 172.5 li
447.167 171.333 li
452.083 169.917 li
457.083 168.167 li
462 166.25 li
466.917 164.083 li
471.917 161.75 li
476.833 159.333 li
481.833 156.833 li
486.75 154.083 li
491.667 151.25 li
496.667 148.25 li
501.583 145.167 li
506.5 142 li
511.5 138.75 li
516.417 135.417 li
521.333 132 li
526.333 128.583 li
531.25 125.083 li
536.25 121.583 li
541.167 118 li
546.083 114.417 li
551.083 110.833 li
556 107.167 li
560.917 103.417 li
565.917 99.6669 li
570.833 95.9169 li
575.833 92.1669 li
.520012 3.0518e-5 .126131 3.0518e-5 cmyk
@
432.333 174.667 mo
437.25 174.333 li
442.25 173.75 li
447.167 173 li
452.083 172.083 li
457.083 171 li
462 169.833 li
466.917 168.417 li
471.917 166.917 li
476.833 165.333 li
481.833 163.667 li
486.75 161.833 li
491.667 159.917 li
496.667 158 li
501.583 155.917 li
506.5 153.75 li
511.5 151.417 li
516.417 149.083 li
521.333 146.667 li
526.333 144.167 li
531.25 141.583 li
536.25 138.917 li
541.167 136.25 li
546.083 133.5 li
551.083 130.75 li
556 127.917 li
560.917 125.083 li
565.917 122.167 li
570.833 119.25 li
575.833 116.333 li
.265019 .809232 3.0518e-5 3.0518e-5 cmyk
@
432.333 175.083 mo
437.25 175.167 li
442.25 175 li
447.167 174.667 li
452.083 174.167 li
457.083 173.583 li
462 172.917 li
466.917 172.167 li
471.917 171.333 li
476.833 170.333 li
481.833 169.333 li
486.75 168.25 li
491.667 167.167 li
496.667 165.917 li
501.583 164.667 li
506.5 163.333 li
511.5 162 li
516.417 160.583 li
521.333 159.083 li
526.333 157.5 li
531.25 155.917 li
536.25 154.25 li
541.167 152.583 li
546.083 150.75 li
551.083 148.917 li
556 147.083 li
560.917 145.167 li
565.917 143.25 li
570.833 141.167 li
575.833 139.167 li
.0639048 3.0518e-5 .996094 3.0518e-5 cmyk
@
432.333 175.5 mo
437.25 176 li
442.25 176.167 li
447.167 176.25 li
452.083 176.25 li
457.083 176.083 li
462 175.833 li
466.917 175.583 li
471.917 175.167 li
476.833 174.833 li
481.833 174.333 li
486.75 173.833 li
491.667 173.25 li
496.667 172.667 li
501.583 172 li
506.5 171.333 li
511.5 170.583 li
516.417 169.833 li
521.333 169.083 li
526.333 168.25 li
531.25 167.333 li
536.25 166.417 li
541.167 165.5 li
546.083 164.583 li
551.083 163.583 li
556 162.5 li
560.917 161.417 li
565.917 160.333 li
570.833 159.25 li
575.833 158.083 li
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
0 779 mo
0 -57 li
593.7 -57 li
593.7 779 li
cp
clp
433.333 173.083 mo
433.333 173.635 432.885 174.083 432.333 174.083 cv
431.781 174.083 431.333 173.635 431.333 173.083 cv
431.333 172.531 431.781 172.083 432.333 172.083 cv
432.885 172.083 433.333 172.531 433.333 173.083 cv
.895628 .7673 3.0518e-5 3.0518e-5 cmyk
f
438.25 171.083 mo
438.25 171.635 437.802 172.083 437.25 172.083 cv
436.698 172.083 436.25 171.635 436.25 171.083 cv
436.25 170.531 436.698 170.083 437.25 170.083 cv
437.802 170.083 438.25 170.531 438.25 171.083 cv
f
443.25 168.667 mo
443.25 169.219 442.802 169.667 442.25 169.667 cv
441.698 169.667 441.25 169.219 441.25 168.667 cv
441.25 168.115 441.698 167.667 442.25 167.667 cv
442.802 167.667 443.25 168.115 443.25 168.667 cv
f
448.167 165.167 mo
448.167 165.719 447.719 166.167 447.167 166.167 cv
446.615 166.167 446.167 165.719 446.167 165.167 cv
446.167 164.615 446.615 164.167 447.167 164.167 cv
447.719 164.167 448.167 164.615 448.167 165.167 cv
f
453.083 161 mo
453.083 161.552 452.635 162 452.083 162 cv
451.531 162 451.083 161.552 451.083 161 cv
451.083 160.448 451.531 160 452.083 160 cv
452.635 160 453.083 160.448 453.083 161 cv
f
458.083 156.917 mo
458.083 157.469 457.635 157.917 457.083 157.917 cv
456.531 157.917 456.083 157.469 456.083 156.917 cv
456.083 156.365 456.531 155.917 457.083 155.917 cv
457.635 155.917 458.083 156.365 458.083 156.917 cv
f
463 152.417 mo
463 152.969 462.552 153.417 462 153.417 cv
461.448 153.417 461 152.969 461 152.417 cv
461 151.865 461.448 151.417 462 151.417 cv
462.552 151.417 463 151.865 463 152.417 cv
f
467.917 147.667 mo
467.917 148.219 467.469 148.667 466.917 148.667 cv
466.365 148.667 465.917 148.219 465.917 147.667 cv
465.917 147.115 466.365 146.667 466.917 146.667 cv
467.469 146.667 467.917 147.115 467.917 147.667 cv
f
472.917 142.75 mo
472.917 143.302 472.469 143.75 471.917 143.75 cv
471.365 143.75 470.917 143.302 470.917 142.75 cv
470.917 142.198 471.365 141.75 471.917 141.75 cv
472.469 141.75 472.917 142.198 472.917 142.75 cv
f
477.833 137.75 mo
477.833 138.302 477.385 138.75 476.833 138.75 cv
476.281 138.75 475.833 138.302 475.833 137.75 cv
475.833 137.198 476.281 136.75 476.833 136.75 cv
477.385 136.75 477.833 137.198 477.833 137.75 cv
f
482.833 132.583 mo
482.833 133.135 482.385 133.583 481.833 133.583 cv
481.281 133.583 480.833 133.135 480.833 132.583 cv
480.833 132.031 481.281 131.583 481.833 131.583 cv
482.385 131.583 482.833 132.031 482.833 132.583 cv
f
487.75 127.417 mo
487.75 127.969 487.302 128.417 486.75 128.417 cv
486.198 128.417 485.75 127.969 485.75 127.417 cv
485.75 126.865 486.198 126.417 486.75 126.417 cv
487.302 126.417 487.75 126.865 487.75 127.417 cv
f
492.667 122.167 mo
492.667 122.719 492.219 123.167 491.667 123.167 cv
491.115 123.167 490.667 122.719 490.667 122.167 cv
490.667 121.615 491.115 121.167 491.667 121.167 cv
492.219 121.167 492.667 121.615 492.667 122.167 cv
f
497.667 116.917 mo
497.667 117.469 497.219 117.917 496.667 117.917 cv
496.115 117.917 495.667 117.469 495.667 116.917 cv
495.667 116.365 496.115 115.917 496.667 115.917 cv
497.219 115.917 497.667 116.365 497.667 116.917 cv
f
502.583 111.583 mo
502.583 112.135 502.135 112.583 501.583 112.583 cv
501.031 112.583 500.583 112.135 500.583 111.583 cv
500.583 111.031 501.031 110.583 501.583 110.583 cv
502.135 110.583 502.583 111.031 502.583 111.583 cv
f
507.5 106.167 mo
507.5 106.719 507.052 107.167 506.5 107.167 cv
505.948 107.167 505.5 106.719 505.5 106.167 cv
505.5 105.615 505.948 105.167 506.5 105.167 cv
507.052 105.167 507.5 105.615 507.5 106.167 cv
f
512.5 100.667 mo
512.5 101.219 512.052 101.667 511.5 101.667 cv
510.948 101.667 510.5 101.219 510.5 100.667 cv
510.5 100.115 510.948 99.6669 511.5 99.6669 cv
512.052 99.6669 512.5 100.115 512.5 100.667 cv
f
517.417 95.1669 mo
517.417 95.7189 516.969 96.1669 516.417 96.1669 cv
515.865 96.1669 515.417 95.7189 515.417 95.1669 cv
515.417 94.6149 515.865 94.1669 516.417 94.1669 cv
516.969 94.1669 517.417 94.6149 517.417 95.1669 cv
f
522.333 89.6669 mo
522.333 90.2189 521.885 90.6669 521.333 90.6669 cv
520.781 90.6669 520.333 90.2189 520.333 89.6669 cv
520.333 89.1149 520.781 88.6669 521.333 88.6669 cv
521.885 88.6669 522.333 89.1149 522.333 89.6669 cv
f
527.333 84.0829 mo
527.333 84.6349 526.885 85.0829 526.333 85.0829 cv
525.781 85.0829 525.333 84.6349 525.333 84.0829 cv
525.333 83.5309 525.781 83.0829 526.333 83.0829 cv
526.885 83.0829 527.333 83.5309 527.333 84.0829 cv
f
532.25 78.4999 mo
532.25 79.0519 531.802 79.4999 531.25 79.4999 cv
530.698 79.4999 530.25 79.0519 530.25 78.4999 cv
530.25 77.9479 530.698 77.4999 531.25 77.4999 cv
531.802 77.4999 532.25 77.9479 532.25 78.4999 cv
f
537.25 72.8329 mo
537.25 73.3849 536.802 73.8329 536.25 73.8329 cv
535.698 73.8329 535.25 73.3849 535.25 72.8329 cv
535.25 72.2809 535.698 71.8329 536.25 71.8329 cv
536.802 71.8329 537.25 72.2809 537.25 72.8329 cv
f
542.167 67.1669 mo
542.167 67.7189 541.719 68.1669 541.167 68.1669 cv
540.615 68.1669 540.167 67.7189 540.167 67.1669 cv
540.167 66.6149 540.615 66.1669 541.167 66.1669 cv
541.719 66.1669 542.167 66.6149 542.167 67.1669 cv
f
547.083 61.4169 mo
547.083 61.9689 546.635 62.4169 546.083 62.4169 cv
545.531 62.4169 545.083 61.9689 545.083 61.4169 cv
545.083 60.8649 545.531 60.4169 546.083 60.4169 cv
546.635 60.4169 547.083 60.8649 547.083 61.4169 cv
f
552.083 55.7499 mo
552.083 56.3019 551.635 56.7499 551.083 56.7499 cv
550.531 56.7499 550.083 56.3019 550.083 55.7499 cv
550.083 55.1979 550.531 54.7499 551.083 54.7499 cv
551.635 54.7499 552.083 55.1979 552.083 55.7499 cv
f
557 49.9169 mo
557 50.4689 556.552 50.9169 556 50.9169 cv
555.448 50.9169 555 50.4689 555 49.9169 cv
555 49.3649 555.448 48.9169 556 48.9169 cv
556.552 48.9169 557 49.3649 557 49.9169 cv
f
561.917 44.1669 mo
561.917 44.7189 561.469 45.1669 560.917 45.1669 cv
560.365 45.1669 559.917 44.7189 559.917 44.1669 cv
559.917 43.6149 560.365 43.1669 560.917 43.1669 cv
561.469 43.1669 561.917 43.6149 561.917 44.1669 cv
f
566.917 38.3329 mo
566.917 38.8849 566.469 39.3329 565.917 39.3329 cv
565.365 39.3329 564.917 38.8849 564.917 38.3329 cv
564.917 37.7809 565.365 37.3329 565.917 37.3329 cv
566.469 37.3329 566.917 37.7809 566.917 38.3329 cv
f
571.833 32.5829 mo
571.833 33.1349 571.385 33.5829 570.833 33.5829 cv
570.281 33.5829 569.833 33.1349 569.833 32.5829 cv
569.833 32.0309 570.281 31.5829 570.833 31.5829 cv
571.385 31.5829 571.833 32.0309 571.833 32.5829 cv
f
576.833 27.0829 mo
576.833 27.6349 576.385 28.0829 575.833 28.0829 cv
575.281 28.0829 574.833 27.6349 574.833 27.0829 cv
574.833 26.5309 575.281 26.0829 575.833 26.0829 cv
576.385 26.0829 576.833 26.5309 576.833 27.0829 cv
f
433.333 173.5 mo
433.333 174.052 432.885 174.5 432.333 174.5 cv
431.781 174.5 431.333 174.052 431.333 173.5 cv
431.333 172.948 431.781 172.5 432.333 172.5 cv
432.885 172.5 433.333 172.948 433.333 173.5 cv
.627314 3.0518e-5 1 3.0518e-5 cmyk
f
438.25 171.917 mo
438.25 172.469 437.802 172.917 437.25 172.917 cv
436.698 172.917 436.25 172.469 436.25 171.917 cv
436.25 171.365 436.698 170.917 437.25 170.917 cv
437.802 170.917 438.25 171.365 438.25 171.917 cv
f
443.25 170.083 mo
443.25 170.635 442.802 171.083 442.25 171.083 cv
441.698 171.083 441.25 170.635 441.25 170.083 cv
441.25 169.531 441.698 169.083 442.25 169.083 cv
442.802 169.083 443.25 169.531 443.25 170.083 cv
f
448.167 167.667 mo
448.167 168.219 447.719 168.667 447.167 168.667 cv
446.615 168.667 446.167 168.219 446.167 167.667 cv
446.167 167.115 446.615 166.667 447.167 166.667 cv
447.719 166.667 448.167 167.115 448.167 167.667 cv
f
453.083 164.5 mo
453.083 165.052 452.635 165.5 452.083 165.5 cv
451.531 165.5 451.083 165.052 451.083 164.5 cv
451.083 163.948 451.531 163.5 452.083 163.5 cv
452.635 163.5 453.083 163.948 453.083 164.5 cv
f
458.083 161.083 mo
458.083 161.635 457.635 162.083 457.083 162.083 cv
456.531 162.083 456.083 161.635 456.083 161.083 cv
456.083 160.531 456.531 160.083 457.083 160.083 cv
457.635 160.083 458.083 160.531 458.083 161.083 cv
f
463 157.667 mo
463 158.219 462.552 158.667 462 158.667 cv
461.448 158.667 461 158.219 461 157.667 cv
461 157.115 461.448 156.667 462 156.667 cv
462.552 156.667 463 157.115 463 157.667 cv
f
467.917 153.917 mo
467.917 154.469 467.469 154.917 466.917 154.917 cv
466.365 154.917 465.917 154.469 465.917 153.917 cv
465.917 153.365 466.365 152.917 466.917 152.917 cv
467.469 152.917 467.917 153.365 467.917 153.917 cv
f
472.917 149.917 mo
472.917 150.469 472.469 150.917 471.917 150.917 cv
471.365 150.917 470.917 150.469 470.917 149.917 cv
470.917 149.365 471.365 148.917 471.917 148.917 cv
472.469 148.917 472.917 149.365 472.917 149.917 cv
f
477.833 145.75 mo
477.833 146.302 477.385 146.75 476.833 146.75 cv
476.281 146.75 475.833 146.302 475.833 145.75 cv
475.833 145.198 476.281 144.75 476.833 144.75 cv
477.385 144.75 477.833 145.198 477.833 145.75 cv
f
482.833 141.5 mo
482.833 142.052 482.385 142.5 481.833 142.5 cv
481.281 142.5 480.833 142.052 480.833 141.5 cv
480.833 140.948 481.281 140.5 481.833 140.5 cv
482.385 140.5 482.833 140.948 482.833 141.5 cv
f
487.75 137.167 mo
487.75 137.719 487.302 138.167 486.75 138.167 cv
486.198 138.167 485.75 137.719 485.75 137.167 cv
485.75 136.615 486.198 136.167 486.75 136.167 cv
487.302 136.167 487.75 136.615 487.75 137.167 cv
f
492.667 132.75 mo
492.667 133.302 492.219 133.75 491.667 133.75 cv
491.115 133.75 490.667 133.302 490.667 132.75 cv
490.667 132.198 491.115 131.75 491.667 131.75 cv
492.219 131.75 492.667 132.198 492.667 132.75 cv
f
497.667 128.25 mo
497.667 128.802 497.219 129.25 496.667 129.25 cv
496.115 129.25 495.667 128.802 495.667 128.25 cv
495.667 127.698 496.115 127.25 496.667 127.25 cv
497.219 127.25 497.667 127.698 497.667 128.25 cv
f
502.583 123.75 mo
502.583 124.302 502.135 124.75 501.583 124.75 cv
501.031 124.75 500.583 124.302 500.583 123.75 cv
500.583 123.198 501.031 122.75 501.583 122.75 cv
502.135 122.75 502.583 123.198 502.583 123.75 cv
f
507.5 119.083 mo
507.5 119.635 507.052 120.083 506.5 120.083 cv
505.948 120.083 505.5 119.635 505.5 119.083 cv
505.5 118.531 505.948 118.083 506.5 118.083 cv
507.052 118.083 507.5 118.531 507.5 119.083 cv
f
512.5 114.5 mo
512.5 115.052 512.052 115.5 511.5 115.5 cv
510.948 115.5 510.5 115.052 510.5 114.5 cv
510.5 113.948 510.948 113.5 511.5 113.5 cv
512.052 113.5 512.5 113.948 512.5 114.5 cv
f
517.417 109.833 mo
517.417 110.385 516.969 110.833 516.417 110.833 cv
515.865 110.833 515.417 110.385 515.417 109.833 cv
515.417 109.281 515.865 108.833 516.417 108.833 cv
516.969 108.833 517.417 109.281 517.417 109.833 cv
f
522.333 105.083 mo
522.333 105.635 521.885 106.083 521.333 106.083 cv
520.781 106.083 520.333 105.635 520.333 105.083 cv
520.333 104.531 520.781 104.083 521.333 104.083 cv
521.885 104.083 522.333 104.531 522.333 105.083 cv
f
527.333 100.333 mo
527.333 100.885 526.885 101.333 526.333 101.333 cv
525.781 101.333 525.333 100.885 525.333 100.333 cv
525.333 99.7809 525.781 99.3329 526.333 99.3329 cv
526.885 99.3329 527.333 99.7809 527.333 100.333 cv
f
532.25 95.4999 mo
532.25 96.0519 531.802 96.4999 531.25 96.4999 cv
530.698 96.4999 530.25 96.0519 530.25 95.4999 cv
530.25 94.9479 530.698 94.4999 531.25 94.4999 cv
531.802 94.4999 532.25 94.9479 532.25 95.4999 cv
f
537.25 90.6669 mo
537.25 91.2189 536.802 91.6669 536.25 91.6669 cv
535.698 91.6669 535.25 91.2189 535.25 90.6669 cv
535.25 90.1149 535.698 89.6669 536.25 89.6669 cv
536.802 89.6669 537.25 90.1149 537.25 90.6669 cv
f
542.167 85.8329 mo
542.167 86.3849 541.719 86.8329 541.167 86.8329 cv
540.615 86.8329 540.167 86.3849 540.167 85.8329 cv
540.167 85.2809 540.615 84.8329 541.167 84.8329 cv
541.719 84.8329 542.167 85.2809 542.167 85.8329 cv
f
547.083 80.9169 mo
547.083 81.4689 546.635 81.9169 546.083 81.9169 cv
545.531 81.9169 545.083 81.4689 545.083 80.9169 cv
545.083 80.3649 545.531 79.9169 546.083 79.9169 cv
546.635 79.9169 547.083 80.3649 547.083 80.9169 cv
f
552.083 75.9999 mo
552.083 76.5519 551.635 76.9999 551.083 76.9999 cv
550.531 76.9999 550.083 76.5519 550.083 75.9999 cv
550.083 75.4479 550.531 74.9999 551.083 74.9999 cv
551.635 74.9999 552.083 75.4479 552.083 75.9999 cv
f
557 70.9999 mo
557 71.5519 556.552 71.9999 556 71.9999 cv
555.448 71.9999 555 71.5519 555 70.9999 cv
555 70.4479 555.448 69.9999 556 69.9999 cv
556.552 69.9999 557 70.4479 557 70.9999 cv
f
561.917 66.0829 mo
561.917 66.6349 561.469 67.0829 560.917 67.0829 cv
560.365 67.0829 559.917 66.6349 559.917 66.0829 cv
559.917 65.5309 560.365 65.0829 560.917 65.0829 cv
561.469 65.0829 561.917 65.5309 561.917 66.0829 cv
f
566.917 61.0829 mo
566.917 61.6349 566.469 62.0829 565.917 62.0829 cv
565.365 62.0829 564.917 61.6349 564.917 61.0829 cv
564.917 60.5309 565.365 60.0829 565.917 60.0829 cv
566.469 60.0829 566.917 60.5309 566.917 61.0829 cv
f
571.833 55.9999 mo
571.833 56.5519 571.385 56.9999 570.833 56.9999 cv
570.281 56.9999 569.833 56.5519 569.833 55.9999 cv
569.833 55.4479 570.281 54.9999 570.833 54.9999 cv
571.385 54.9999 571.833 55.4479 571.833 55.9999 cv
f
576.833 50.9169 mo
576.833 51.4689 576.385 51.9169 575.833 51.9169 cv
575.281 51.9169 574.833 51.4689 574.833 50.9169 cv
574.833 50.3649 575.281 49.9169 575.833 49.9169 cv
576.385 49.9169 576.833 50.3649 576.833 50.9169 cv
f
433.333 173.833 mo
433.333 174.385 432.885 174.833 432.333 174.833 cv
431.781 174.833 431.333 174.385 431.333 173.833 cv
431.333 173.281 431.781 172.833 432.333 172.833 cv
432.885 172.833 433.333 173.281 433.333 173.833 cv
3.0518e-5 .990631 1 .000396735 cmyk
f
438.25 172.75 mo
438.25 173.302 437.802 173.75 437.25 173.75 cv
436.698 173.75 436.25 173.302 436.25 172.75 cv
436.25 172.198 436.698 171.75 437.25 171.75 cv
437.802 171.75 438.25 172.198 438.25 172.75 cv
f
443.25 171.333 mo
443.25 171.885 442.802 172.333 442.25 172.333 cv
441.698 172.333 441.25 171.885 441.25 171.333 cv
441.25 170.781 441.698 170.333 442.25 170.333 cv
442.802 170.333 443.25 170.781 443.25 171.333 cv
f
448.167 169.667 mo
448.167 170.219 447.719 170.667 447.167 170.667 cv
446.615 170.667 446.167 170.219 446.167 169.667 cv
446.167 169.115 446.615 168.667 447.167 168.667 cv
447.719 168.667 448.167 169.115 448.167 169.667 cv
f
453.083 167.583 mo
453.083 168.135 452.635 168.583 452.083 168.583 cv
451.531 168.583 451.083 168.135 451.083 167.583 cv
451.083 167.031 451.531 166.583 452.083 166.583 cv
452.635 166.583 453.083 167.031 453.083 167.583 cv
f
458.083 165 mo
458.083 165.552 457.635 166 457.083 166 cv
456.531 166 456.083 165.552 456.083 165 cv
456.083 164.448 456.531 164 457.083 164 cv
457.635 164 458.083 164.448 458.083 165 cv
f
463 162.333 mo
463 162.885 462.552 163.333 462 163.333 cv
461.448 163.333 461 162.885 461 162.333 cv
461 161.781 461.448 161.333 462 161.333 cv
462.552 161.333 463 161.781 463 162.333 cv
f
467.917 159.5 mo
467.917 160.052 467.469 160.5 466.917 160.5 cv
466.365 160.5 465.917 160.052 465.917 159.5 cv
465.917 158.948 466.365 158.5 466.917 158.5 cv
467.469 158.5 467.917 158.948 467.917 159.5 cv
f
472.917 156.583 mo
472.917 157.135 472.469 157.583 471.917 157.583 cv
471.365 157.583 470.917 157.135 470.917 156.583 cv
470.917 156.031 471.365 155.583 471.917 155.583 cv
472.469 155.583 472.917 156.031 472.917 156.583 cv
f
477.833 153.417 mo
477.833 153.969 477.385 154.417 476.833 154.417 cv
476.281 154.417 475.833 153.969 475.833 153.417 cv
475.833 152.865 476.281 152.417 476.833 152.417 cv
477.385 152.417 477.833 152.865 477.833 153.417 cv
f
482.833 150.167 mo
482.833 150.719 482.385 151.167 481.833 151.167 cv
481.281 151.167 480.833 150.719 480.833 150.167 cv
480.833 149.615 481.281 149.167 481.833 149.167 cv
482.385 149.167 482.833 149.615 482.833 150.167 cv
f
487.75 146.667 mo
487.75 147.219 487.302 147.667 486.75 147.667 cv
486.198 147.667 485.75 147.219 485.75 146.667 cv
485.75 146.115 486.198 145.667 486.75 145.667 cv
487.302 145.667 487.75 146.115 487.75 146.667 cv
f
492.667 143.167 mo
492.667 143.719 492.219 144.167 491.667 144.167 cv
491.115 144.167 490.667 143.719 490.667 143.167 cv
490.667 142.615 491.115 142.167 491.667 142.167 cv
492.219 142.167 492.667 142.615 492.667 143.167 cv
f
497.667 139.5 mo
497.667 140.052 497.219 140.5 496.667 140.5 cv
496.115 140.5 495.667 140.052 495.667 139.5 cv
495.667 138.948 496.115 138.5 496.667 138.5 cv
497.219 138.5 497.667 138.948 497.667 139.5 cv
f
502.583 135.833 mo
502.583 136.385 502.135 136.833 501.583 136.833 cv
501.031 136.833 500.583 136.385 500.583 135.833 cv
500.583 135.281 501.031 134.833 501.583 134.833 cv
502.135 134.833 502.583 135.281 502.583 135.833 cv
f
507.5 132.083 mo
507.5 132.635 507.052 133.083 506.5 133.083 cv
505.948 133.083 505.5 132.635 505.5 132.083 cv
505.5 131.531 505.948 131.083 506.5 131.083 cv
507.052 131.083 507.5 131.531 507.5 132.083 cv
f
512.5 128.25 mo
512.5 128.802 512.052 129.25 511.5 129.25 cv
510.948 129.25 510.5 128.802 510.5 128.25 cv
510.5 127.698 510.948 127.25 511.5 127.25 cv
512.052 127.25 512.5 127.698 512.5 128.25 cv
f
517.417 124.417 mo
517.417 124.969 516.969 125.417 516.417 125.417 cv
515.865 125.417 515.417 124.969 515.417 124.417 cv
515.417 123.865 515.865 123.417 516.417 123.417 cv
516.969 123.417 517.417 123.865 517.417 124.417 cv
f
522.333 120.5 mo
522.333 121.052 521.885 121.5 521.333 121.5 cv
520.781 121.5 520.333 121.052 520.333 120.5 cv
520.333 119.948 520.781 119.5 521.333 119.5 cv
521.885 119.5 522.333 119.948 522.333 120.5 cv
f
527.333 116.5 mo
527.333 117.052 526.885 117.5 526.333 117.5 cv
525.781 117.5 525.333 117.052 525.333 116.5 cv
525.333 115.948 525.781 115.5 526.333 115.5 cv
526.885 115.5 527.333 115.948 527.333 116.5 cv
f
532.25 112.5 mo
532.25 113.052 531.802 113.5 531.25 113.5 cv
530.698 113.5 530.25 113.052 530.25 112.5 cv
530.25 111.948 530.698 111.5 531.25 111.5 cv
531.802 111.5 532.25 111.948 532.25 112.5 cv
f
537.25 108.5 mo
537.25 109.052 536.802 109.5 536.25 109.5 cv
535.698 109.5 535.25 109.052 535.25 108.5 cv
535.25 107.948 535.698 107.5 536.25 107.5 cv
536.802 107.5 537.25 107.948 537.25 108.5 cv
f
542.167 104.5 mo
542.167 105.052 541.719 105.5 541.167 105.5 cv
540.615 105.5 540.167 105.052 540.167 104.5 cv
540.167 103.948 540.615 103.5 541.167 103.5 cv
541.719 103.5 542.167 103.948 542.167 104.5 cv
f
547.083 100.417 mo
547.083 100.969 546.635 101.417 546.083 101.417 cv
545.531 101.417 545.083 100.969 545.083 100.417 cv
545.083 99.8649 545.531 99.4169 546.083 99.4169 cv
546.635 99.4169 547.083 99.8649 547.083 100.417 cv
f
552.083 96.2499 mo
552.083 96.8019 551.635 97.2499 551.083 97.2499 cv
550.531 97.2499 550.083 96.8019 550.083 96.2499 cv
550.083 95.6979 550.531 95.2499 551.083 95.2499 cv
551.635 95.2499 552.083 95.6979 552.083 96.2499 cv
f
557 92.0829 mo
557 92.6349 556.552 93.0829 556 93.0829 cv
555.448 93.0829 555 92.6349 555 92.0829 cv
555 91.5309 555.448 91.0829 556 91.0829 cv
556.552 91.0829 557 91.5309 557 92.0829 cv
f
561.917 87.9169 mo
561.917 88.4689 561.469 88.9169 560.917 88.9169 cv
560.365 88.9169 559.917 88.4689 559.917 87.9169 cv
559.917 87.3649 560.365 86.9169 560.917 86.9169 cv
561.469 86.9169 561.917 87.3649 561.917 87.9169 cv
f
566.917 83.7499 mo
566.917 84.3019 566.469 84.7499 565.917 84.7499 cv
565.365 84.7499 564.917 84.3019 564.917 83.7499 cv
564.917 83.1979 565.365 82.7499 565.917 82.7499 cv
566.469 82.7499 566.917 83.1979 566.917 83.7499 cv
f
571.833 79.4999 mo
571.833 80.0519 571.385 80.4999 570.833 80.4999 cv
570.281 80.4999 569.833 80.0519 569.833 79.4999 cv
569.833 78.9479 570.281 78.4999 570.833 78.4999 cv
571.385 78.4999 571.833 78.9479 571.833 79.4999 cv
f
576.833 75.2499 mo
576.833 75.8019 576.385 76.2499 575.833 76.2499 cv
575.281 76.2499 574.833 75.8019 574.833 75.2499 cv
574.833 74.6979 575.281 74.2499 575.833 74.2499 cv
576.385 74.2499 576.833 74.6979 576.833 75.2499 cv
f
433.333 174.25 mo
433.333 174.802 432.885 175.25 432.333 175.25 cv
431.781 175.25 431.333 174.802 431.333 174.25 cv
431.333 173.698 431.781 173.25 432.333 173.25 cv
432.885 173.25 433.333 173.698 433.333 174.25 cv
.520012 3.0518e-5 .126131 3.0518e-5 cmyk
f
438.25 173.5 mo
438.25 174.052 437.802 174.5 437.25 174.5 cv
436.698 174.5 436.25 174.052 436.25 173.5 cv
436.25 172.948 436.698 172.5 437.25 172.5 cv
437.802 172.5 438.25 172.948 438.25 173.5 cv
f
443.25 172.583 mo
443.25 173.135 442.802 173.583 442.25 173.583 cv
441.698 173.583 441.25 173.135 441.25 172.583 cv
441.25 172.031 441.698 171.583 442.25 171.583 cv
442.802 171.583 443.25 172.031 443.25 172.583 cv
f
448.167 171.333 mo
448.167 171.885 447.719 172.333 447.167 172.333 cv
446.615 172.333 446.167 171.885 446.167 171.333 cv
446.167 170.781 446.615 170.333 447.167 170.333 cv
447.719 170.333 448.167 170.781 448.167 171.333 cv
f
453.083 170 mo
453.083 170.552 452.635 171 452.083 171 cv
451.531 171 451.083 170.552 451.083 170 cv
451.083 169.448 451.531 169 452.083 169 cv
452.635 169 453.083 169.448 453.083 170 cv
f
458.083 168.333 mo
458.083 168.885 457.635 169.333 457.083 169.333 cv
456.531 169.333 456.083 168.885 456.083 168.333 cv
456.083 167.781 456.531 167.333 457.083 167.333 cv
457.635 167.333 458.083 167.781 458.083 168.333 cv
f
463 166.5 mo
463 167.052 462.552 167.5 462 167.5 cv
461.448 167.5 461 167.052 461 166.5 cv
461 165.948 461.448 165.5 462 165.5 cv
462.552 165.5 463 165.948 463 166.5 cv
f
467.917 164.5 mo
467.917 165.052 467.469 165.5 466.917 165.5 cv
466.365 165.5 465.917 165.052 465.917 164.5 cv
465.917 163.948 466.365 163.5 466.917 163.5 cv
467.469 163.5 467.917 163.948 467.917 164.5 cv
f
472.917 162.333 mo
472.917 162.885 472.469 163.333 471.917 163.333 cv
471.365 163.333 470.917 162.885 470.917 162.333 cv
470.917 161.781 471.365 161.333 471.917 161.333 cv
472.469 161.333 472.917 161.781 472.917 162.333 cv
f
477.833 160.083 mo
477.833 160.635 477.385 161.083 476.833 161.083 cv
476.281 161.083 475.833 160.635 475.833 160.083 cv
475.833 159.531 476.281 159.083 476.833 159.083 cv
477.385 159.083 477.833 159.531 477.833 160.083 cv
f
482.833 157.833 mo
482.833 158.385 482.385 158.833 481.833 158.833 cv
481.281 158.833 480.833 158.385 480.833 157.833 cv
480.833 157.281 481.281 156.833 481.833 156.833 cv
482.385 156.833 482.833 157.281 482.833 157.833 cv
f
487.75 155.417 mo
487.75 155.969 487.302 156.417 486.75 156.417 cv
486.198 156.417 485.75 155.969 485.75 155.417 cv
485.75 154.865 486.198 154.417 486.75 154.417 cv
487.302 154.417 487.75 154.865 487.75 155.417 cv
f
492.667 152.833 mo
492.667 153.385 492.219 153.833 491.667 153.833 cv
491.115 153.833 490.667 153.385 490.667 152.833 cv
490.667 152.281 491.115 151.833 491.667 151.833 cv
492.219 151.833 492.667 152.281 492.667 152.833 cv
f
497.667 150.167 mo
497.667 150.719 497.219 151.167 496.667 151.167 cv
496.115 151.167 495.667 150.719 495.667 150.167 cv
495.667 149.615 496.115 149.167 496.667 149.167 cv
497.219 149.167 497.667 149.615 497.667 150.167 cv
f
502.583 147.417 mo
502.583 147.969 502.135 148.417 501.583 148.417 cv
501.031 148.417 500.583 147.969 500.583 147.417 cv
500.583 146.865 501.031 146.417 501.583 146.417 cv
502.135 146.417 502.583 146.865 502.583 147.417 cv
f
507.5 144.583 mo
507.5 145.135 507.052 145.583 506.5 145.583 cv
505.948 145.583 505.5 145.135 505.5 144.583 cv
505.5 144.031 505.948 143.583 506.5 143.583 cv
507.052 143.583 507.5 144.031 507.5 144.583 cv
f
512.5 141.667 mo
512.5 142.219 512.052 142.667 511.5 142.667 cv
510.948 142.667 510.5 142.219 510.5 141.667 cv
510.5 141.115 510.948 140.667 511.5 140.667 cv
512.052 140.667 512.5 141.115 512.5 141.667 cv
f
517.417 138.667 mo
517.417 139.219 516.969 139.667 516.417 139.667 cv
515.865 139.667 515.417 139.219 515.417 138.667 cv
515.417 138.115 515.865 137.667 516.417 137.667 cv
516.969 137.667 517.417 138.115 517.417 138.667 cv
f
522.333 135.667 mo
522.333 136.219 521.885 136.667 521.333 136.667 cv
520.781 136.667 520.333 136.219 520.333 135.667 cv
520.333 135.115 520.781 134.667 521.333 134.667 cv
521.885 134.667 522.333 135.115 522.333 135.667 cv
f
527.333 132.5 mo
527.333 133.052 526.885 133.5 526.333 133.5 cv
525.781 133.5 525.333 133.052 525.333 132.5 cv
525.333 131.948 525.781 131.5 526.333 131.5 cv
526.885 131.5 527.333 131.948 527.333 132.5 cv
f
532.25 129.417 mo
532.25 129.969 531.802 130.417 531.25 130.417 cv
530.698 130.417 530.25 129.969 530.25 129.417 cv
530.25 128.865 530.698 128.417 531.25 128.417 cv
531.802 128.417 532.25 128.865 532.25 129.417 cv
f
537.25 126.167 mo
537.25 126.719 536.802 127.167 536.25 127.167 cv
535.698 127.167 535.25 126.719 535.25 126.167 cv
535.25 125.615 535.698 125.167 536.25 125.167 cv
536.802 125.167 537.25 125.615 537.25 126.167 cv
f
542.167 123 mo
542.167 123.552 541.719 124 541.167 124 cv
540.615 124 540.167 123.552 540.167 123 cv
540.167 122.448 540.615 122 541.167 122 cv
541.719 122 542.167 122.448 542.167 123 cv
f
547.083 119.75 mo
547.083 120.302 546.635 120.75 546.083 120.75 cv
545.531 120.75 545.083 120.302 545.083 119.75 cv
545.083 119.198 545.531 118.75 546.083 118.75 cv
546.635 118.75 547.083 119.198 547.083 119.75 cv
f
552.083 116.417 mo
552.083 116.969 551.635 117.417 551.083 117.417 cv
550.531 117.417 550.083 116.969 550.083 116.417 cv
550.083 115.865 550.531 115.417 551.083 115.417 cv
551.635 115.417 552.083 115.865 552.083 116.417 cv
f
557 113.083 mo
557 113.635 556.552 114.083 556 114.083 cv
555.448 114.083 555 113.635 555 113.083 cv
555 112.531 555.448 112.083 556 112.083 cv
556.552 112.083 557 112.531 557 113.083 cv
f
561.917 109.75 mo
561.917 110.302 561.469 110.75 560.917 110.75 cv
560.365 110.75 559.917 110.302 559.917 109.75 cv
559.917 109.198 560.365 108.75 560.917 108.75 cv
561.469 108.75 561.917 109.198 561.917 109.75 cv
f
566.917 106.417 mo
566.917 106.969 566.469 107.417 565.917 107.417 cv
565.365 107.417 564.917 106.969 564.917 106.417 cv
564.917 105.865 565.365 105.417 565.917 105.417 cv
566.469 105.417 566.917 105.865 566.917 106.417 cv
f
571.833 103 mo
571.833 103.552 571.385 104 570.833 104 cv
570.281 104 569.833 103.552 569.833 103 cv
569.833 102.448 570.281 102 570.833 102 cv
571.385 102 571.833 102.448 571.833 103 cv
f
576.833 99.5829 mo
576.833 100.135 576.385 100.583 575.833 100.583 cv
575.281 100.583 574.833 100.135 574.833 99.5829 cv
574.833 99.0309 575.281 98.5829 575.833 98.5829 cv
576.385 98.5829 576.833 99.0309 576.833 99.5829 cv
f
433.333 174.667 mo
433.333 175.219 432.885 175.667 432.333 175.667 cv
431.781 175.667 431.333 175.219 431.333 174.667 cv
431.333 174.115 431.781 173.667 432.333 173.667 cv
432.885 173.667 433.333 174.115 433.333 174.667 cv
.265019 .809232 3.0518e-5 3.0518e-5 cmyk
f
438.25 174.333 mo
438.25 174.885 437.802 175.333 437.25 175.333 cv
436.698 175.333 436.25 174.885 436.25 174.333 cv
436.25 173.781 436.698 173.333 437.25 173.333 cv
437.802 173.333 438.25 173.781 438.25 174.333 cv
f
443.25 173.75 mo
443.25 174.302 442.802 174.75 442.25 174.75 cv
441.698 174.75 441.25 174.302 441.25 173.75 cv
441.25 173.198 441.698 172.75 442.25 172.75 cv
442.802 172.75 443.25 173.198 443.25 173.75 cv
f
448.167 173 mo
448.167 173.552 447.719 174 447.167 174 cv
446.615 174 446.167 173.552 446.167 173 cv
446.167 172.448 446.615 172 447.167 172 cv
447.719 172 448.167 172.448 448.167 173 cv
f
453.083 172.167 mo
453.083 172.719 452.635 173.167 452.083 173.167 cv
451.531 173.167 451.083 172.719 451.083 172.167 cv
451.083 171.615 451.531 171.167 452.083 171.167 cv
452.635 171.167 453.083 171.615 453.083 172.167 cv
f
458.083 171.083 mo
458.083 171.635 457.635 172.083 457.083 172.083 cv
456.531 172.083 456.083 171.635 456.083 171.083 cv
456.083 170.531 456.531 170.083 457.083 170.083 cv
457.635 170.083 458.083 170.531 458.083 171.083 cv
f
463 169.917 mo
463 170.469 462.552 170.917 462 170.917 cv
461.448 170.917 461 170.469 461 169.917 cv
461 169.365 461.448 168.917 462 168.917 cv
462.552 168.917 463 169.365 463 169.917 cv
f
467.917 168.667 mo
467.917 169.219 467.469 169.667 466.917 169.667 cv
466.365 169.667 465.917 169.219 465.917 168.667 cv
465.917 168.115 466.365 167.667 466.917 167.667 cv
467.469 167.667 467.917 168.115 467.917 168.667 cv
f
472.917 167.25 mo
472.917 167.802 472.469 168.25 471.917 168.25 cv
471.365 168.25 470.917 167.802 470.917 167.25 cv
470.917 166.698 471.365 166.25 471.917 166.25 cv
472.469 166.25 472.917 166.698 472.917 167.25 cv
f
477.833 165.833 mo
477.833 166.385 477.385 166.833 476.833 166.833 cv
476.281 166.833 475.833 166.385 475.833 165.833 cv
475.833 165.281 476.281 164.833 476.833 164.833 cv
477.385 164.833 477.833 165.281 477.833 165.833 cv
f
482.833 164.25 mo
482.833 164.802 482.385 165.25 481.833 165.25 cv
481.281 165.25 480.833 164.802 480.833 164.25 cv
480.833 163.698 481.281 163.25 481.833 163.25 cv
482.385 163.25 482.833 163.698 482.833 164.25 cv
f
487.75 162.667 mo
487.75 163.219 487.302 163.667 486.75 163.667 cv
486.198 163.667 485.75 163.219 485.75 162.667 cv
485.75 162.115 486.198 161.667 486.75 161.667 cv
487.302 161.667 487.75 162.115 487.75 162.667 cv
f
492.667 161 mo
492.667 161.552 492.219 162 491.667 162 cv
491.115 162 490.667 161.552 490.667 161 cv
490.667 160.448 491.115 160 491.667 160 cv
492.219 160 492.667 160.448 492.667 161 cv
f
497.667 159.25 mo
497.667 159.802 497.219 160.25 496.667 160.25 cv
496.115 160.25 495.667 159.802 495.667 159.25 cv
495.667 158.698 496.115 158.25 496.667 158.25 cv
497.219 158.25 497.667 158.698 497.667 159.25 cv
f
502.583 157.417 mo
502.583 157.969 502.135 158.417 501.583 158.417 cv
501.031 158.417 500.583 157.969 500.583 157.417 cv
500.583 156.865 501.031 156.417 501.583 156.417 cv
502.135 156.417 502.583 156.865 502.583 157.417 cv
f
507.5 155.5 mo
507.5 156.052 507.052 156.5 506.5 156.5 cv
505.948 156.5 505.5 156.052 505.5 155.5 cv
505.5 154.948 505.948 154.5 506.5 154.5 cv
507.052 154.5 507.5 154.948 507.5 155.5 cv
f
512.5 153.583 mo
512.5 154.135 512.052 154.583 511.5 154.583 cv
510.948 154.583 510.5 154.135 510.5 153.583 cv
510.5 153.031 510.948 152.583 511.5 152.583 cv
512.052 152.583 512.5 153.031 512.5 153.583 cv
f
517.417 151.583 mo
517.417 152.135 516.969 152.583 516.417 152.583 cv
515.865 152.583 515.417 152.135 515.417 151.583 cv
515.417 151.031 515.865 150.583 516.417 150.583 cv
516.969 150.583 517.417 151.031 517.417 151.583 cv
f
522.333 149.5 mo
522.333 150.052 521.885 150.5 521.333 150.5 cv
520.781 150.5 520.333 150.052 520.333 149.5 cv
520.333 148.948 520.781 148.5 521.333 148.5 cv
521.885 148.5 522.333 148.948 522.333 149.5 cv
f
527.333 147.333 mo
527.333 147.885 526.885 148.333 526.333 148.333 cv
525.781 148.333 525.333 147.885 525.333 147.333 cv
525.333 146.781 525.781 146.333 526.333 146.333 cv
526.885 146.333 527.333 146.781 527.333 147.333 cv
f
532.25 145.167 mo
532.25 145.719 531.802 146.167 531.25 146.167 cv
530.698 146.167 530.25 145.719 530.25 145.167 cv
530.25 144.615 530.698 144.167 531.25 144.167 cv
531.802 144.167 532.25 144.615 532.25 145.167 cv
f
537.25 142.833 mo
537.25 143.385 536.802 143.833 536.25 143.833 cv
535.698 143.833 535.25 143.385 535.25 142.833 cv
535.25 142.281 535.698 141.833 536.25 141.833 cv
536.802 141.833 537.25 142.281 537.25 142.833 cv
f
542.167 140.583 mo
542.167 141.135 541.719 141.583 541.167 141.583 cv
540.615 141.583 540.167 141.135 540.167 140.583 cv
540.167 140.031 540.615 139.583 541.167 139.583 cv
541.719 139.583 542.167 140.031 542.167 140.583 cv
f
547.083 138.25 mo
547.083 138.802 546.635 139.25 546.083 139.25 cv
545.531 139.25 545.083 138.802 545.083 138.25 cv
545.083 137.698 545.531 137.25 546.083 137.25 cv
546.635 137.25 547.083 137.698 547.083 138.25 cv
f
552.083 135.833 mo
552.083 136.385 551.635 136.833 551.083 136.833 cv
550.531 136.833 550.083 136.385 550.083 135.833 cv
550.083 135.281 550.531 134.833 551.083 134.833 cv
551.635 134.833 552.083 135.281 552.083 135.833 cv
f
557 133.417 mo
557 133.969 556.552 134.417 556 134.417 cv
555.448 134.417 555 133.969 555 133.417 cv
555 132.865 555.448 132.417 556 132.417 cv
556.552 132.417 557 132.865 557 133.417 cv
f
561.917 130.917 mo
561.917 131.469 561.469 131.917 560.917 131.917 cv
560.365 131.917 559.917 131.469 559.917 130.917 cv
559.917 130.365 560.365 129.917 560.917 129.917 cv
561.469 129.917 561.917 130.365 561.917 130.917 cv
f
566.917 128.417 mo
566.917 128.969 566.469 129.417 565.917 129.417 cv
565.365 129.417 564.917 128.969 564.917 128.417 cv
564.917 127.865 565.365 127.417 565.917 127.417 cv
566.469 127.417 566.917 127.865 566.917 128.417 cv
f
571.833 125.833 mo
571.833 126.385 571.385 126.833 570.833 126.833 cv
570.281 126.833 569.833 126.385 569.833 125.833 cv
569.833 125.281 570.281 124.833 570.833 124.833 cv
571.385 124.833 571.833 125.281 571.833 125.833 cv
f
576.833 123.333 mo
576.833 123.885 576.385 124.333 575.833 124.333 cv
575.281 124.333 574.833 123.885 574.833 123.333 cv
574.833 122.781 575.281 122.333 575.833 122.333 cv
576.385 122.333 576.833 122.781 576.833 123.333 cv
f
433.333 175.083 mo
433.333 175.635 432.885 176.083 432.333 176.083 cv
431.781 176.083 431.333 175.635 431.333 175.083 cv
431.333 174.531 431.781 174.083 432.333 174.083 cv
432.885 174.083 433.333 174.531 433.333 175.083 cv
.0639048 3.0518e-5 .996094 3.0518e-5 cmyk
f
438.25 175.167 mo
438.25 175.719 437.802 176.167 437.25 176.167 cv
436.698 176.167 436.25 175.719 436.25 175.167 cv
436.25 174.615 436.698 174.167 437.25 174.167 cv
437.802 174.167 438.25 174.615 438.25 175.167 cv
f
443.25 175 mo
443.25 175.552 442.802 176 442.25 176 cv
441.698 176 441.25 175.552 441.25 175 cv
441.25 174.448 441.698 174 442.25 174 cv
442.802 174 443.25 174.448 443.25 175 cv
f
448.167 174.667 mo
448.167 175.219 447.719 175.667 447.167 175.667 cv
446.615 175.667 446.167 175.219 446.167 174.667 cv
446.167 174.115 446.615 173.667 447.167 173.667 cv
447.719 173.667 448.167 174.115 448.167 174.667 cv
f
453.083 174.167 mo
453.083 174.719 452.635 175.167 452.083 175.167 cv
451.531 175.167 451.083 174.719 451.083 174.167 cv
451.083 173.615 451.531 173.167 452.083 173.167 cv
452.635 173.167 453.083 173.615 453.083 174.167 cv
f
458.083 173.667 mo
458.083 174.219 457.635 174.667 457.083 174.667 cv
456.531 174.667 456.083 174.219 456.083 173.667 cv
456.083 173.115 456.531 172.667 457.083 172.667 cv
457.635 172.667 458.083 173.115 458.083 173.667 cv
f
463 173 mo
463 173.552 462.552 174 462 174 cv
461.448 174 461 173.552 461 173 cv
461 172.448 461.448 172 462 172 cv
462.552 172 463 172.448 463 173 cv
f
467.917 172.25 mo
467.917 172.802 467.469 173.25 466.917 173.25 cv
466.365 173.25 465.917 172.802 465.917 172.25 cv
465.917 171.698 466.365 171.25 466.917 171.25 cv
467.469 171.25 467.917 171.698 467.917 172.25 cv
f
472.917 171.5 mo
472.917 172.052 472.469 172.5 471.917 172.5 cv
471.365 172.5 470.917 172.052 470.917 171.5 cv
470.917 170.948 471.365 170.5 471.917 170.5 cv
472.469 170.5 472.917 170.948 472.917 171.5 cv
f
477.833 170.583 mo
477.833 171.135 477.385 171.583 476.833 171.583 cv
476.281 171.583 475.833 171.135 475.833 170.583 cv
475.833 170.031 476.281 169.583 476.833 169.583 cv
477.385 169.583 477.833 170.031 477.833 170.583 cv
f
482.833 169.667 mo
482.833 170.219 482.385 170.667 481.833 170.667 cv
481.281 170.667 480.833 170.219 480.833 169.667 cv
480.833 169.115 481.281 168.667 481.833 168.667 cv
482.385 168.667 482.833 169.115 482.833 169.667 cv
f
487.75 168.75 mo
487.75 169.302 487.302 169.75 486.75 169.75 cv
486.198 169.75 485.75 169.302 485.75 168.75 cv
485.75 168.198 486.198 167.75 486.75 167.75 cv
487.302 167.75 487.75 168.198 487.75 168.75 cv
f
492.667 167.75 mo
492.667 168.302 492.219 168.75 491.667 168.75 cv
491.115 168.75 490.667 168.302 490.667 167.75 cv
490.667 167.198 491.115 166.75 491.667 166.75 cv
492.219 166.75 492.667 167.198 492.667 167.75 cv
f
497.667 166.667 mo
497.667 167.219 497.219 167.667 496.667 167.667 cv
496.115 167.667 495.667 167.219 495.667 166.667 cv
495.667 166.115 496.115 165.667 496.667 165.667 cv
497.219 165.667 497.667 166.115 497.667 166.667 cv
f
502.583 165.5 mo
502.583 166.052 502.135 166.5 501.583 166.5 cv
501.031 166.5 500.583 166.052 500.583 165.5 cv
500.583 164.948 501.031 164.5 501.583 164.5 cv
502.135 164.5 502.583 164.948 502.583 165.5 cv
f
507.5 164.417 mo
507.5 164.969 507.052 165.417 506.5 165.417 cv
505.948 165.417 505.5 164.969 505.5 164.417 cv
505.5 163.865 505.948 163.417 506.5 163.417 cv
507.052 163.417 507.5 163.865 507.5 164.417 cv
f
512.5 163.167 mo
512.5 163.719 512.052 164.167 511.5 164.167 cv
510.948 164.167 510.5 163.719 510.5 163.167 cv
510.5 162.615 510.948 162.167 511.5 162.167 cv
512.052 162.167 512.5 162.615 512.5 163.167 cv
f
517.417 162 mo
517.417 162.552 516.969 163 516.417 163 cv
515.865 163 515.417 162.552 515.417 162 cv
515.417 161.448 515.865 161 516.417 161 cv
516.969 161 517.417 161.448 517.417 162 cv
f
522.333 160.667 mo
522.333 161.219 521.885 161.667 521.333 161.667 cv
520.781 161.667 520.333 161.219 520.333 160.667 cv
520.333 160.115 520.781 159.667 521.333 159.667 cv
521.885 159.667 522.333 160.115 522.333 160.667 cv
f
527.333 159.417 mo
527.333 159.969 526.885 160.417 526.333 160.417 cv
525.781 160.417 525.333 159.969 525.333 159.417 cv
525.333 158.865 525.781 158.417 526.333 158.417 cv
526.885 158.417 527.333 158.865 527.333 159.417 cv
f
532.25 158 mo
532.25 158.552 531.802 159 531.25 159 cv
530.698 159 530.25 158.552 530.25 158 cv
530.25 157.448 530.698 157 531.25 157 cv
531.802 157 532.25 157.448 532.25 158 cv
f
537.25 156.667 mo
537.25 157.219 536.802 157.667 536.25 157.667 cv
535.698 157.667 535.25 157.219 535.25 156.667 cv
535.25 156.115 535.698 155.667 536.25 155.667 cv
536.802 155.667 537.25 156.115 537.25 156.667 cv
f
542.167 155.25 mo
542.167 155.802 541.719 156.25 541.167 156.25 cv
540.615 156.25 540.167 155.802 540.167 155.25 cv
540.167 154.698 540.615 154.25 541.167 154.25 cv
541.719 154.25 542.167 154.698 542.167 155.25 cv
f
547.083 153.75 mo
547.083 154.302 546.635 154.75 546.083 154.75 cv
545.531 154.75 545.083 154.302 545.083 153.75 cv
545.083 153.198 545.531 152.75 546.083 152.75 cv
546.635 152.75 547.083 153.198 547.083 153.75 cv
f
552.083 152.25 mo
552.083 152.802 551.635 153.25 551.083 153.25 cv
550.531 153.25 550.083 152.802 550.083 152.25 cv
550.083 151.698 550.531 151.25 551.083 151.25 cv
551.635 151.25 552.083 151.698 552.083 152.25 cv
f
557 150.75 mo
557 151.302 556.552 151.75 556 151.75 cv
555.448 151.75 555 151.302 555 150.75 cv
555 150.198 555.448 149.75 556 149.75 cv
556.552 149.75 557 150.198 557 150.75 cv
f
561.917 149.167 mo
561.917 149.719 561.469 150.167 560.917 150.167 cv
560.365 150.167 559.917 149.719 559.917 149.167 cv
559.917 148.615 560.365 148.167 560.917 148.167 cv
561.469 148.167 561.917 148.615 561.917 149.167 cv
f
566.917 147.583 mo
566.917 148.135 566.469 148.583 565.917 148.583 cv
565.365 148.583 564.917 148.135 564.917 147.583 cv
564.917 147.031 565.365 146.583 565.917 146.583 cv
566.469 146.583 566.917 147.031 566.917 147.583 cv
f
571.833 146 mo
571.833 146.552 571.385 147 570.833 147 cv
570.281 147 569.833 146.552 569.833 146 cv
569.833 145.448 570.281 145 570.833 145 cv
571.385 145 571.833 145.448 571.833 146 cv
f
576.833 144.333 mo
576.833 144.885 576.385 145.333 575.833 145.333 cv
575.281 145.333 574.833 144.885 574.833 144.333 cv
574.833 143.781 575.281 143.333 575.833 143.333 cv
576.385 143.333 576.833 143.781 576.833 144.333 cv
f
433.333 175.5 mo
433.333 176.052 432.885 176.5 432.333 176.5 cv
431.781 176.5 431.333 176.052 431.333 175.5 cv
431.333 174.948 431.781 174.5 432.333 174.5 cv
432.885 174.5 433.333 174.948 433.333 175.5 cv
1 /0 /CSD get_res sepcs
1 sep
f
438.25 176 mo
438.25 176.552 437.802 177 437.25 177 cv
436.698 177 436.25 176.552 436.25 176 cv
436.25 175.448 436.698 175 437.25 175 cv
437.802 175 438.25 175.448 438.25 176 cv
f
443.25 176.167 mo
443.25 176.719 442.802 177.167 442.25 177.167 cv
441.698 177.167 441.25 176.719 441.25 176.167 cv
441.25 175.615 441.698 175.167 442.25 175.167 cv
442.802 175.167 443.25 175.615 443.25 176.167 cv
f
448.167 176.25 mo
448.167 176.802 447.719 177.25 447.167 177.25 cv
446.615 177.25 446.167 176.802 446.167 176.25 cv
446.167 175.698 446.615 175.25 447.167 175.25 cv
447.719 175.25 448.167 175.698 448.167 176.25 cv
f
453.083 176.25 mo
453.083 176.802 452.635 177.25 452.083 177.25 cv
451.531 177.25 451.083 176.802 451.083 176.25 cv
451.083 175.698 451.531 175.25 452.083 175.25 cv
452.635 175.25 453.083 175.698 453.083 176.25 cv
f
458.083 176.167 mo
458.083 176.719 457.635 177.167 457.083 177.167 cv
456.531 177.167 456.083 176.719 456.083 176.167 cv
456.083 175.615 456.531 175.167 457.083 175.167 cv
457.635 175.167 458.083 175.615 458.083 176.167 cv
f
463 175.917 mo
463 176.469 462.552 176.917 462 176.917 cv
461.448 176.917 461 176.469 461 175.917 cv
461 175.365 461.448 174.917 462 174.917 cv
462.552 174.917 463 175.365 463 175.917 cv
f
467.917 175.667 mo
467.917 176.219 467.469 176.667 466.917 176.667 cv
466.365 176.667 465.917 176.219 465.917 175.667 cv
465.917 175.115 466.365 174.667 466.917 174.667 cv
467.469 174.667 467.917 175.115 467.917 175.667 cv
f
472.917 175.333 mo
472.917 175.885 472.469 176.333 471.917 176.333 cv
471.365 176.333 470.917 175.885 470.917 175.333 cv
470.917 174.781 471.365 174.333 471.917 174.333 cv
472.469 174.333 472.917 174.781 472.917 175.333 cv
f
477.833 175 mo
477.833 175.552 477.385 176 476.833 176 cv
476.281 176 475.833 175.552 475.833 175 cv
475.833 174.448 476.281 174 476.833 174 cv
477.385 174 477.833 174.448 477.833 175 cv
f
482.833 174.583 mo
482.833 175.135 482.385 175.583 481.833 175.583 cv
481.281 175.583 480.833 175.135 480.833 174.583 cv
480.833 174.031 481.281 173.583 481.833 173.583 cv
482.385 173.583 482.833 174.031 482.833 174.583 cv
f
487.75 174.167 mo
487.75 174.719 487.302 175.167 486.75 175.167 cv
486.198 175.167 485.75 174.719 485.75 174.167 cv
485.75 173.615 486.198 173.167 486.75 173.167 cv
487.302 173.167 487.75 173.615 487.75 174.167 cv
f
492.667 173.667 mo
492.667 174.219 492.219 174.667 491.667 174.667 cv
491.115 174.667 490.667 174.219 490.667 173.667 cv
490.667 173.115 491.115 172.667 491.667 172.667 cv
492.219 172.667 492.667 173.115 492.667 173.667 cv
f
497.667 173.083 mo
497.667 173.635 497.219 174.083 496.667 174.083 cv
496.115 174.083 495.667 173.635 495.667 173.083 cv
495.667 172.531 496.115 172.083 496.667 172.083 cv
497.219 172.083 497.667 172.531 497.667 173.083 cv
f
502.583 172.583 mo
502.583 173.135 502.135 173.583 501.583 173.583 cv
501.031 173.583 500.583 173.135 500.583 172.583 cv
500.583 172.031 501.031 171.583 501.583 171.583 cv
502.135 171.583 502.583 172.031 502.583 172.583 cv
f
507.5 172 mo
507.5 172.552 507.052 173 506.5 173 cv
505.948 173 505.5 172.552 505.5 172 cv
505.5 171.448 505.948 171 506.5 171 cv
507.052 171 507.5 171.448 507.5 172 cv
f
512.5 171.333 mo
512.5 171.885 512.052 172.333 511.5 172.333 cv
510.948 172.333 510.5 171.885 510.5 171.333 cv
510.5 170.781 510.948 170.333 511.5 170.333 cv
512.052 170.333 512.5 170.781 512.5 171.333 cv
f
517.417 170.667 mo
517.417 171.219 516.969 171.667 516.417 171.667 cv
515.865 171.667 515.417 171.219 515.417 170.667 cv
515.417 170.115 515.865 169.667 516.417 169.667 cv
516.969 169.667 517.417 170.115 517.417 170.667 cv
f
522.333 170 mo
522.333 170.552 521.885 171 521.333 171 cv
520.781 171 520.333 170.552 520.333 170 cv
520.333 169.448 520.781 169 521.333 169 cv
521.885 169 522.333 169.448 522.333 170 cv
f
527.333 169.333 mo
527.333 169.885 526.885 170.333 526.333 170.333 cv
525.781 170.333 525.333 169.885 525.333 169.333 cv
525.333 168.781 525.781 168.333 526.333 168.333 cv
526.885 168.333 527.333 168.781 527.333 169.333 cv
f
532.25 168.583 mo
532.25 169.135 531.802 169.583 531.25 169.583 cv
530.698 169.583 530.25 169.135 530.25 168.583 cv
530.25 168.031 530.698 167.583 531.25 167.583 cv
531.802 167.583 532.25 168.031 532.25 168.583 cv
f
537.25 167.833 mo
537.25 168.385 536.802 168.833 536.25 168.833 cv
535.698 168.833 535.25 168.385 535.25 167.833 cv
535.25 167.281 535.698 166.833 536.25 166.833 cv
536.802 166.833 537.25 167.281 537.25 167.833 cv
f
542.167 167.083 mo
542.167 167.635 541.719 168.083 541.167 168.083 cv
540.615 168.083 540.167 167.635 540.167 167.083 cv
540.167 166.531 540.615 166.083 541.167 166.083 cv
541.719 166.083 542.167 166.531 542.167 167.083 cv
f
547.083 166.25 mo
547.083 166.802 546.635 167.25 546.083 167.25 cv
545.531 167.25 545.083 166.802 545.083 166.25 cv
545.083 165.698 545.531 165.25 546.083 165.25 cv
546.635 165.25 547.083 165.698 547.083 166.25 cv
f
552.083 165.417 mo
552.083 165.969 551.635 166.417 551.083 166.417 cv
550.531 166.417 550.083 165.969 550.083 165.417 cv
550.083 164.865 550.531 164.417 551.083 164.417 cv
551.635 164.417 552.083 164.865 552.083 165.417 cv
f
557 164.583 mo
557 165.135 556.552 165.583 556 165.583 cv
555.448 165.583 555 165.135 555 164.583 cv
555 164.031 555.448 163.583 556 163.583 cv
556.552 163.583 557 164.031 557 164.583 cv
f
561.917 163.75 mo
561.917 164.302 561.469 164.75 560.917 164.75 cv
560.365 164.75 559.917 164.302 559.917 163.75 cv
559.917 163.198 560.365 162.75 560.917 162.75 cv
561.469 162.75 561.917 163.198 561.917 163.75 cv
f
566.917 162.833 mo
566.917 163.385 566.469 163.833 565.917 163.833 cv
565.365 163.833 564.917 163.385 564.917 162.833 cv
564.917 162.281 565.365 161.833 565.917 161.833 cv
566.469 161.833 566.917 162.281 566.917 162.833 cv
f
571.833 161.917 mo
571.833 162.469 571.385 162.917 570.833 162.917 cv
570.281 162.917 569.833 162.469 569.833 161.917 cv
569.833 161.365 570.281 160.917 570.833 160.917 cv
571.385 160.917 571.833 161.365 571.833 161.917 cv
f
576.833 161 mo
576.833 161.552 576.385 162 575.833 162 cv
575.281 162 574.833 161.552 574.833 161 cv
574.833 160.448 575.281 160 575.833 160 cv
576.385 160 576.833 160.448 576.833 161 cv
f
grestore
gsave
427.417 9.91699 mo
427.417 194 li
575.917 194 li
575.917 9.91699 li
cp
clp
[6 6 ] 0 dsh
432.333 180.833 mo
437.25 181 li
442.25 181.083 li
447.167 181.167 li
452.083 181.25 li
457.083 181.333 li
462 181.417 li
466.917 181.417 li
471.917 181.5 li
476.833 181.5 li
481.833 181.583 li
486.75 181.583 li
491.667 181.667 li
506.5 181.667 li
511.5 181.75 li
565.917 181.75 li
570.833 181.667 li
575.833 181.667 li
3.0518e-5 .990631 1 .000396735 cmyk
@
grestore
WLYIZO+Helvetica*1 [10 0 0 -10 0 0 ]msf
464.667 217.917 mo
(Temperature  [K])
[6.10992 5.56 8.32993 5.56 5.56 3.32993 5.56 2.78 5.55997 3.32996 5.56 2.77997 
2.78003 2.78003 6.66992 0 ]xsh
430.333 33.4999 mo
480.75 33.4999 li
480.75 16.9167 li
430.333 16.9167 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
0 lj
430.333 33.4999 mo
480.75 33.4999 li
480.75 16.9167 li
430.333 16.9167 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
WLYIZO+Helvetica*1 [11 0 0 -11 0 0 ]msf
432.333 29.0829 mo
(CuGaSe)
[7.94183 6.116 8.55801 6.11597 7.33691 0 ]xsh
WLYIZO+Helvetica*1 [8 0 0 -8 0 0 ]msf
474.5 29.0829 mo
(2)sh
550.083 169.833 mo
565.25 169.833 li
565.25 156.75 li
550.083 156.75 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
WLYIZO+Helvetica*1 [7 0 0 -7 0 0 ]msf
551.083 167.333 mo
(10)
[3.89197 0 ]xsh
WLYIZO+Helvetica*1 [5 0 0 -5 0 0 ]msf
558.833 162.333 mo
(19)
[2.75 0 ]xsh
550.083 140.167 mo
565.25 140.167 li
565.25 127.083 li
550.083 127.083 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
WLYIZO+Helvetica*1 [7 0 0 -7 0 0 ]msf
551.083 137.667 mo
(10)
[3.89197 0 ]xsh
WLYIZO+Helvetica*1 [5 0 0 -5 0 0 ]msf
558.833 132.667 mo
(17)
[2.75 0 ]xsh
512.917 124.833 mo
528.083 124.833 li
528.083 111.75 li
512.917 111.75 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
WLYIZO+Helvetica*1 [7 0 0 -7 0 0 ]msf
513.917 122.333 mo
(10)
[3.89197 0 ]xsh
WLYIZO+Helvetica*1 [5 0 0 -5 0 0 ]msf
521.667 117.333 mo
(15)
[2.75 0 ]xsh
481.833 117.083 mo
495 117.083 li
495 106 li
481.833 106 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
%%IncludeResource: font Helvetica
/WLYIZO+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /three /four /five /six /seven /eight /nine 
9{/.notdef}rp /C /.notdef /E /F /G /.notdef /I 
/.notdef /K 7{/.notdef}rp /S /T /.notdef /V 4{/.notdef}rp 
/bracketleft /.notdef /bracketright 3{/.notdef}rp /a 3{/.notdef}rp /e /.notdef 
/g /.notdef /i 3{/.notdef}rp /m /n /.notdef /p 
/.notdef /r /.notdef /t /u 138{/.notdef}rp]
WLYIZO+Helvetica nf
WLYIZO+Helvetica*1 [7 0 0 -7 0 0 ]msf
481.833 115.583 mo
(10)
[3.892 0 ]xsh
WLYIZO+Helvetica*1 [5 0 0 -5 0 0 ]msf
489.583 110.583 mo
(13)
[2.75003 0 ]xsh
WLYIZO+Helvetica*1 [15 0 0 -15 0 0 ]msf
513.917 -25.6671 mo
( Figure 8)
[4.16998 9.16492 3.32977 8.33997 8.34003 4.99487 8.34003 4.16998 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/WLYIZO+Helvetica*1 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: font Helvetica
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
